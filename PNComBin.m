(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



PNComBin`$PackageVersion={"0.4.5",{2011,05,06}};


BeginPackage["PNComBin`",{"xAct`xTensor`","xAct`xPerm`","xAct`xCore`"}];


Print["Package PNComBin`  version ",$PackageVersion[[1]],", ",$PackageVersion[[2]]];
Print["Guillaume Faye and Julien Laidet."];
Print[StringJoin@@ConstantArray["-",60]];


(* Memory management *)

$RecursionLimit=8192;
$IterationLimit=Infinity;

Module[

{directorylist=DeleteDuplicates[{$UserBaseDirectory,$BaseDirectory,$InstallationDirectory,If[Or@@((Quiet[NotebookDirectory[]]===#)&/@{"",$Failed}),Directory[],NotebookDirectory[]],$InitialDirectory, Directory[]}],
filename={}},

While[
directorylist=!={} && filename==={},

filename=FileNames["PNComBin.m",First[directorylist],3];directorylist=Rest[directorylist]
];

If[filename==={},filename=FileNames["PNComBin.m",$HomeDirectory,Infinity]];

If[filename==={},
Print["Non-standard location of the package PNComBin; it has to be moved to an appropriate directory"],
$PNComBinDirectory=DirectoryName@First@filename]

];

(* xTensor option setting *)

SetOptions[SymmetryOf,ConstantMetric->True];(* turn on a faster canonicalization algarithm in case of constant metric *)
SetOptions[CanonicalPerm, MathLink->True];
(* turn on the connection with the C executable used by ToCanonical *)

(* turn off definition messages *)
SetOptions[DefManifold,DefInfo->False];  
SetOptions[DefVBundle,DefInfo->False];
SetOptions[DefParameter,DefInfo->False];
SetOptions[DefMetric,DefInfo->False];
SetOptions[DefTensor,DefInfo->False];
SetOptions[DefConstantSymbol,DefInfo->False];


E3::usage="E3 represents the Euclidean space regarded as a 3-dimensional manifold.";
a::usage="a is an index for tensors defined on TangentE3";
b::usage="b is an index for tensors defined on TangentE3";
i::usage="i is an index for tensors defined on TangentE3";
j::usage="j is an index for tensors defined on TangentE3";
k::usage="k is an index for tensors defined on TangentE3";
l::usage="l is an index for tensors defined on TangentE3";
m::usage="m is an index for tensors defined on TangentE3";
p::usage="p is an index for tensors defined on TangentE3";
q::usage="q is an index for tensors defined on TangentE3";
TangentE3::usage="TangentE3 is the vectorial tangent bundle of E3.";
t::usage="t is the time parameter.";
Metricdelta::usage="Metricdelta[-i, -j] is the flat metric defined on E3. Metricdelta[i, j] denotes its inverse.";
epsilonMetricdelta::usage="epsilonMetricdelta[-i, -j, -k] is the Levi-Civita tensor of E3.";
G::usage="G is the Newton constant.";
c::usage="c is the speed of light.";
m1::usage="m1 is the post-Newtonian mass of the first point-body.";
m2::usage="m2 is the post-Newtonian mass of the second point-body.";
mtot::usage="mtot is the total post-Newtonian mass.";
\[Delta]::usage="\[Delta] is the relative mass difference (m1-m2)/mtot.";
\[Nu]::usage="\[Nu] is the symmetric mass ratio.";
r0p::usage="r0p is an infra-red cut-off.";
r0::usage="r0 is a constant associated with infra-red divergences.";
r1p::usage="r1p is a ultra-violet cut-off associated with divergences near the first point-body.";
r2p::usage="r1p is a ultra-violet cut-off associated with divergences near the second point-body.";
s1::usage="r1p is a ultra-violet constant associated with divergences near the first point-body.";
s2::usage="r1p is a ultra-violet constant associated with divergences near the second point-body.";
\[Epsilon]::usage="\[Epsilon] is the small d-3 parameter intervening in the context of dimensional regularization.";
\[Lambda]::usage="\[Lambda] is the ambiguity constant arising in the near zone dynamics at the 3PN order.";
\[Kappa]::usage="\[Kappa] is the first ambiguity constant entering the source multipole moments.";
\[Zeta]::usage="\[Zeta] is the second ambiguity constant entering the source multipole moments.";
\[Xi]::usage="\[Xi] is the third ambiguity constant entering the source multipole moments.";
xi::usage="xi[i] represents the field point vector. The allowed indices are a, b, i, j, k, l, m, p, q, q1, ..., q016.";
r::usage="r[] is the distance of the field point from the origin.";
ni::usage="ni[i] is the unit vector xi[i]/r[] associated to the field direction.";
y1i::usage="y1i[i] is the position vector of the first point-body.";
y2i::usage="y2i[i] is the position vector of the second point-body.";
r1i::usage="r1i[i] represents the vector xi[i] - y1i[i] that links the first point-body to the field point.";
r2i::usage="r2i[i] represents the vector xi[i] - y2i[i] that links the second point-body to the field point.";
r1::usage="r1[] is the distance between the field point and the first point-body.";
r2::usage="r2[] is the distance between the field point and the second point-body.";
n1i::usage="n1i[i] is the unit vector r1i[i]/r1[] pointing from the first point-body to the field point.";
n2i::usage="n2i[i] is the unit vector r2i[i]/r2[] pointing from the second point-body to the field point.";
y12i::usage="y12i[i] is the separation vector that links the two point-bodies.";
r12::usage="r12[] represents the separation of the two point-bodies.";
n12i::usage="n12i[i] is the unit vector r12i[i]/r12[] associated with the separation vector r12i[i].";
v1i ::usage="v1i[i] is the velocity vector of the first point-body.";
v2i::usage="v2i[i] is the velocity vector of the second point-body.";
v12i::usage="v12i[i] is the relative velocity vector.";
a1i::usage="a1i[i] is the acceleration vector of the first point-body.";
a2i::usage="a2i[i] is the acceleration vector of the second point-body.";
p1i::usage="p1i[i] is the canonical momentum of the first point-body.";
p2i ::usage="p2i[i] is the canonical momentum of the second point-body.";
S1i::usage="S1i[i] is the spin vector of the first point-body.";
S1ij::usage="S1ij[i,j] is the spin tensor of the first point-body.";
S10i::usage="S10i[i] is the spin tensor of the first point-body.";
S2i::usage="S2i[i] is the spin vector of the second point-body.";
S2ij::usage="S2ij[i,j] is the spin tensor of the second point-body.";
S20i::usage="S20i[i] is the spin tensor of the second point-body.";
S1di::usage="S1di[i] is the time derivative of the first body spin vector.";
S2di::usage="S2di[i] is the time derivative of the second body spin vector.";
S1dij::usage="S1dij[i,j] is the time derivative of the first body spin tensor.";
S2dij::usage="S2dij[i,j] is the time derivative of the second body spin tensor.";
\[Kappa]1::usage="\[Kappa]1 is the dimensionless coefficient characterizing the spin-induced quadrupole of body 1.";
\[Kappa]2::usage="\[Kappa]2 is the dimensionless coefficient characterizing the spin-induced quadrupole of body 2.";
yCMi::usage="yCMi[i] is the separation vector that links the 2 point-bodies in the COM.";
rCM::usage="rCM[] represents the separation of the two point-bodies in the COM.";
nCMi::usage="nCMi[i] is the unit vector yCM[i]/rCM[] associated with the separation vector yCMi[i].";
lCMi::usage="lCMi[i] is the unit vector associated with the Newtonian orbital angular momentum m \[Nu] rCM(nCM x vCM)[i].";
\[Lambda]CMi::usage="\[Lambda]CMi[i] is the unit vector (lCM x \[Lambda]CM)[i].";
vCMi::usage="vCMi[i] is relative velocity vector in the COM.";
aCMi::usage="aCMi[i] is the relative acceleration in the COM.";
x::usage="x is the post-Newtonian frequency variable.";
Si::usage="Si[i] is the symmetric total spin.";
Sigmai::usage="Sigmai[i] is the antisymmetric spin mtot (S2i[i]/m2-S1i[i]/m1).";
SdCMi::usage="SdCMi[i] is the time derivative of the symmetric spin.";
SigmadCMi::usage="SigmadCMi[i] is the time derivative of the antisymmetric spin.";
Sn::usage="Sn[i] is the symmetric spin vector projection onto nCM.";
S\[Lambda]::usage="S\[Lambda][i] is the symmetric spin vector projection onto \[Lambda]CM.";Sl::usage="Sl[i] is the symmetric spin vector projection onto lCM.";
Sigman::usage="Sigman[i] is the antisymmetric spin vector projection onto nCM.";
Sigma\[Lambda]::usage="Sigma\[Lambda][i] is the antisymmetric spin vector projection onto \[Lambda]CM.";Sigmal::usage="Sigmal[i] is the antisymmetric spin vector projection onto lCM.";
STFn1L::usage="STFn1L[q1,...,ql] is a symbolic STF tensor representing the STF part of n1i[q1] ... n1i[ql].";
STFn2L::usage="STFn2L[q1,...,ql] is a symbolic STF tensor representing the STF part of n2i[q1] ... n2i[ql].";
STFn12L::usage="STFn12L[q1,...,ql] is a symbolic STF tensor representing the STF part of n12i[q1] ... n12i[ql].";
STFnL::usage="STFnL[q1,...,ql] is a symbolic STF tensor representing the STF part of ni[q1] ... ni[ql].";
 STF1xL::usage="STF1xL[q1,...,ql] is the STF part of xi[q1] xi[q2] ... xi[ql] expressed in terms of r1i[a] and y1i[a].";
YL::usage="YL[q1,...,ql] is the tensor defined by the FP integral of r[]^l STFnL[q1,...,ql]/(r1[] r2[]) on xi[i] over E3.";
dirac1::usage="dirac1[] is the Dirac function at point-body 1.\n dirac1[q1,...,ql] is the partial dervative of dirac1[] with respect to xi[q1] ... xi[ql].";
dirac2::usage="dirac2[] is the Dirac function at point-body 2.\n dirac2[q1,...,ql] is the partial dervative of dirac2[] with respect to xi[q1] ... xi[ql].";


PutDefinition::usage="PutDefinition[name, symbol] saves the definition of symbol. \n PutDefinition[name, list] saves the definition of all symbols entering list.";
Truncate::usage="Truncate[expr,n] performs  the power series expansion of each term of 
expr about the point 1/c=0 to order 1/c^n in turn.";
LogExpand::usage="LogExpand[expr] expands subexpressions of the form Log[arg1 arg2] in expr as Log[arg1]+Log[arg2].\n It admits an option Assumptions\[Rule]boolean that specifies default assumptions to be made about symbolic quantities contained in logarithms Log[arg] as well as dilogarithms PolyLog[2,arg]."; 
LogFactor::usage="LogFactor[expr] gathers subexpressions of the form \[Alpha] Log[arg1] - \[Alpha] Log[arg2] in expr as \[Alpha] Log[arg1/arg2].";
PutScalarProduct::usage="PutScalarProduct[expr] surrounds scalar products of 2 vectors and mixed products of 3 vectors in expr by a function Scalar. It is faster but less powerful than PutScalar.";
Arrange::usage="Arrange[expr] analyses and simplifies its tensorial argument expr. Simplifications of non-tensorial character are not achieved. It is powerful but slow.";
Unsymmetrize::usage="Unsymmetrize[expr] returns a tensorial expression that generates expr by symmetrisation.";
CrushSTF::usage="CrushSTF[expr] returns a tensorial expression whose STF part is equal to expr.";
SymmetrizeMetricProduct::usage="SymmetrizeMetricProduct[expr] optimally symmetrises a product of Metricdelta tensors.";
TimeDerivative::usage="TimeDerivative[expr, n] computes the first time derivative of expr to order  1/c^n. \n TimeDerivative[expr, n, m] computes the m^th time derivative of expr to order  1/c^n. \n SpinFlag is an option that can be set to NoSpin (default), SpinVector or SpinTensor for the acceleration replacements to be performed respectively without spins, using spin vector variables and using spin tensor variables.";
Derivativex::usage="Derivativex[expr,q1,q2,...] computes the multi derivative of expr with respect to xi[q1], xi[q2], ...";
Derivativey1::usage="Derivativey1[expr,q1,q2,...] computes the multi derivative of expr with respect to y1i[q1], y1i[q2], ...";
Derivativey2::usage="Derivativey2[expr,q1,q2,...] computes the multi derivative of expr with respect to y2i[q1], y2i[q2], ...";
FromMathTensorToxTensor::usage="FromMathTensorToxTensor[expr] converts a well formed MathTensor fields depending on R1, R2, n1[ind], n2[ind], n12[ind], y1[ind], y2[ind], x[ind], n[ind], v1[ind], v2[ind], v[ind], S1[ind], S2[ind] with ind=ui, li, ju, lj, ... and all scalar products formed by concatenating the previous tensors'name,as well as Kdelta[ind1, ind2], Epsilon[ind1, ind2, ind3], m, nu, r1, r2, r00, lambda, into a well formed xTensor expression with the notations of PNComBin.";
Exchange12::usage="Exchange12[expr] exchanges the role of point-bodies 1 and 2.";
FromUnitVectorScalarToDistances::usage="FromUnitVectorScalarToDistances[expr] replaces the scalar products of unit vectors n1i[a], n2i[a], n12i[a], by their explicit expressions in terms of r1[], r2[], r12[].";
ProductToSTF::usage="ProductToSTF[expr,vec] performs the STF decomposition of all products of the form vec[q1]...vec[ql] entering expr where vec is one of the four unit vectors n1i, n2i, n12i, ni. ProductToSTF[vec[q1] vec[q2]...vec[ql],vec]\[Rule] STF[v[q1,q2,...,ql]]+\[Delta] STF[v[L-2]]+... for vec=v; the metric is assumed to be Metricdelta;the STF pieces are defined by means of the operators STFn1L, STFn2L, STFn12L, STFnL.";
STFToProduct::usage="STFToProduct[expr,vec] computes explicitly the STF part of tensor of the form STFvecL[q1,q2,...,ql] entering expr where vec is one of the four unit vectors n1i, n2i, n12i, ni. STFToProduct[STFvecL[q1,q2...,ql],vec]\[DoubleLeftRightArrow]STF[v[q1,q2,...,ql]=v[q1,q2,...,ql]+\[Delta]...\[Delta] v+... for vec=v; the metric is assumed to be Metricdelta; STFvecL is one of the four STF tensors STFn1L, STFn2L, STFn12L, STFnL.";
Angularn::usage="Angularn[expr,vec] returns the angular average of an integrand expr of the form vec[q1] ... vec[ql] where vec is one of the four unit vectors n1i, n2i, n12i, ni.";
AngularAverage1::usage="AngularAverage1[expr, varr] returns the angular average of expr, assuming r1[]<r12[] if varr=r12[], and r12<r1[] if varr=r1[]. The integrand expr is implicitely assumed to be made of monomials of r1[], possibly multiplied  by logarithms of r1[], r2[], or S=r1[]+r2[]+r12[]. \n AngularAverage1 admits an option WithScalarProducts->boolean which specifies whether indices on n1i, n2i should be contracted, canonicalized and enclosed by Scalar - in which case boolean=True -, or should be kept utouched - in which case boolean=False.";
VolumeIntegrate1::usage="VolumeIntegrate1[expr] computes the volume integral of expr over E3 in the sense of Hadamard. The integrand expr is implicitely assumed to be made of monomials of r1[], possibly multiplied  by logarithms of r1[], r2[], or S=r1[]+r2[]+r12[]. \n VolumeIntegrate1 admits an option Memorize->boolean which specifies whether the values of all elementary integrals computed during the evaluation should be stored in the memory of the system or not. If not, values that were already memorised in the current session are automatically erased.";
SaveVolumeIntegrate1::usage="SaveVolumeIntegrate1[] saves permanently the values of all elementary integrals computed during the session.\n SaveVolumeIntegrate1[name] performs the back-up in in the file name. If the target file does not exist, SaveVolumeIntegrate1[] or  SaveVolumeIntegrate1[name] fails unless the option Create has been set to True. Any discrepancy between the values to be saved and those saved in previous sessions results in an error message. The values that have permanently saved earlier can be replaced by those that have been evaluated and memorised in the current session if the option Reset is set to True.";
LoadVolumeIntegrate1::usage="LoadVolumeIntegrate1[] loads the values of all elementary integrals that have been saved permanently by SaveVolumeIntegral[].";
Hadamard::usage="Hadamard[expr] achieves the Hadamard regularisation of expr at point r[]\[Rule]\[Infinity].";
Hadamard1::usage="Hadamard1[expr] achieves the Hadamard regularisation of expr at point xi[i]=y1i[i].";
Hadamard2::usage="Hadamard2[expr] achieves the Hadamard regularisation of expr at point xi[i]=y2i[i].";
ToCenterOfMass::usage="ToCenterOfMass[expr,n] computes expr in the center-of-mass frame in terms of the center-of-mass variables rCM[], nCMi[i] and vCMi[i] (Si[i] and Sigmai[i] for spinning bodies) at order n.";
ToCircularOrbits::usage="ToCircularOrbits[expr,n] reduces a center-of-mass expression expr assuming (quasi-)circular orbits.";


SpinOn::usage="SpinOn is a boolean option of CenterOfMass which, if turned to True, switches the spins on (with vector variables) in the expressions of the accelerations and the center-of-mass position.";
SpinFlag::usage="SpinFlag is an option for TimeDerivative which can take three values and indicates if the spin-dependent terms are included when performing acceleration replacements : when set to NoSpin (the default value), no such terms are included, when set to SpinVector, the replacements are made using the spin vector variables, when set to SpinTensor, they are made using the spin tensor variables.";
NoSpin::usage="NoSpin is the default option value for TimeDerivative, indicating the acceleration replacements are made without including spin contributions.";
SpinVector::usage="NoSpin is an option value for TimeDerivative, indicating the acceleration replacements are including spin contributions, with the spin vector variables.";
SpinTensor::usage="NoSpin is an option value for TimeDerivative, indicating the acceleration replacements are including spin contributions, with the spin tensor variables.";
WithScalarProducts::usage="WithScalarProducts is a boolean option for AngularAverage1 which specifies whether indices on n1i, n2i should be contracted, canonicalized and enclosed by Scalar - in which case it is set to True -, or should be kept untouched - in which case it is set to False.";
Memorize::usage="Memorize is a boolean option of VolumeIntegrate1 which specifies whether the values of all elementary integrals computed during the evaluation should be stored in the memory of the system or not. If not, values that were already memorised in the current session are automatically erased.";
Create::usage="Create is a boolean option for SaveVolumeIntegrate1 which, if turned to True, allows one to create the file to be used for saving permanently the values of all the elementary integrals that have been computed in the current session.";
Reset::usage="Reset is a boolean option for SaveVolumeIntegrate1 which, if turned to True, removes the file used for saving permanently the values of all the elementary integrals and replaces it with a new file containing the current values of those integrals.";
AddDefinition::usage="AddDefinition is a boolean option for LoadVolumeIntegrate1 which, if turned to False, prevents the definitions of all integrals to be loaded from being added to the definition of VolumeIntegrate1.";
$PNComBinDirectory::usage="$PNComBinDirectory gives the directory where PNComBin has been placed on the current system.";
$MaxDummyNumber::usage="$MaxDummyNumber gives the maximum number of indices that are planned to be used";


Begin["`Private`"];


DefManifold[E3,3,{a, b,i,j,k,l,m,p,q}];

DefParameter[t]; (* time parameter *)
DefParameter[invar]; (* inner radial integration variable *)
DefParameter[outvar]; (* outer radial integration variable *)
DefParameter[inftyvar]; (* outer radial integration variable *)

DefMetric[+1,Metricdelta[-i,-j],PD,{",","\[PartialD]"},PrintAs->"\[Delta]",FlatMetric->True];


SetOptions[ContractMetric,AllowUpperDerivatives->True]; 
(* allowance of upper indices on space derivatives in metric contraction *)

SortCovDsStart[PD]; (* commutation of partial derivatives *)

$MixedDers=False; (* automatic commutation of metric and partial derivatives *)

Unprotect[PD];
PD[i_][ParamD[params__][exp_]]:=ParamD[params][PD[i][exp]]
Protect[PD]; (* automatic commutation of PD and the parametric derivative ParamD *)


PrintAs[epsilonMetricdelta]^="\[Epsilon]"; (* Levi-Civita tensor notation *)

Begin["xAct`xTensor`Private`"];
MakeBoxesParamD[pslist_List,boxes_,"CompactPrefix",StandardForm]:=Block[{$WarningFrom="ParamD Formatting"},RowBox[Append[SubsuperscriptBox["\[PartialD]",PrintAs[#1],If[#2>1,ToString@#2,"",Throw["Error in CompactPrefix formatting"]]]&@@@Tally[pslist],boxes]]];
End[];
$ParamDFormat="CompactPrefix";(*time derivative formatting*)


DefConstantSymbol[G]; (* Newton constant *)
DefConstantSymbol[c]; (* speed of light *)
DefConstantSymbol[m1,PrintAs->"\!\(\*SubscriptBox[\(m\), \(1\)]\)"]; (* post-Newtonian mass of the first point-body *)
DefConstantSymbol[m2,PrintAs->"\!\(\*SubscriptBox[\(m\), \(2\)]\)"];(* post-Newtonian mass of the second point-body *)
DefConstantSymbol[mtot,PrintAs->"\!\(\*SubscriptBox[\(m\), \(tot\)]\)"]; (* total post-Newtonian mass *)
DefConstantSymbol[\[Delta]]; (* relative mass difference (m1-m2)/mtot *)
DefConstantSymbol[\[Nu]]; (* mass parameter *)
DefConstantSymbol[r0p,PrintAs->"\!\(\*SubsuperscriptBox[\(r\), \(0\), \('\)]\)"]; (* infra-red cut-off *)
DefConstantSymbol[r0,PrintAs->"\!\(\*SubscriptBox[\(r\), \(0\)]\)"]; (* infra-red constant *)
DefConstantSymbol[r1p,PrintAs->"\!\(\*SubsuperscriptBox[\(r\), \(1\), \('\)]\)"]; (* ultra-violet cut-off relative to the first point-body *)
DefConstantSymbol[r2p,PrintAs->"\!\(\*SubsuperscriptBox[\(r\), \(2\), \('\)]\)"]; (* ultra-violet cut-off relative to the second point-body *)
DefConstantSymbol[s1,PrintAs->"\!\(\*SubscriptBox[\(s\), \(1\)]\)"];(* ultra-violet constant relative to the first point-body *)
DefConstantSymbol[s2,PrintAs->"\!\(\*SubscriptBox[\(s\), \(2\)]\)"]; (* ultra-violet constant relative to the second point-body *)
DefConstantSymbol[\[Epsilon]]; (* d-3 in the context of dimensional regularization*)
DefConstantSymbol[\[Lambda]]; (* ambiguity constant in the near zone *)
DefConstantSymbol[\[Kappa]]; (* ambiguity constant in the far zone *)
DefConstantSymbol[\[Zeta]]; (* ambiguity constant in the far zone *)
DefConstantSymbol[\[Xi]]; (* ambiguity constant in the far zone *)
DefConstantSymbol[\[Kappa]1,PrintAs -> "\!\(\[Kappa]\_1\)"];(*coefficient of the spin-induced quadrupole of 1*) 
DefConstantSymbol[\[Kappa]2,PrintAs -> "\!\(\[Kappa]\_2\)"];(*coefficient of the spin-induced quadrupole of 2*)

DefTensor[xi[i],{E3,t}]; (* position vector field *)
DefTensor[r[],{E3,t}]; (* norm of xi[i] *)
DefTensor[ni[i],{E3,t},PrintAs->"n"]; (* xi[i]/r[] *)
DefTensor[y1i[i],{E3,t}, PrintAs -> "\!\(y\_1\)"]; (* position vector of point-body 1 *)
DefTensor[y2i[i],{E3,t} ,PrintAs -> "\!\(y\_2\)"]; (* position vector of point-body 2 *)
DefTensor[r1i[i],{E3,t}]; (* link to the first point-body xi[i] - y1i[i] *)
DefTensor[r2i[i],{E3,t}]; (* link to the second point body xi[i] - y2i[i] *)
DefTensor[r1[],{E3,t},PrintAs->"\!\(r\_1\)"]; (* norm of r1i[i] *)
DefTensor[r2[],{E3,t},PrintAs->"\!\(r\_2\)"]; (* norm of r2i[i] *)
DefTensor[n1i[i],{E3,t},PrintAs-> "\!\(n\_1\)"]; (* r1i[i]/r1[] *)
DefTensor[n2i[i],{E3,t},PrintAs-> "\!\(n\_2\)"]; (* r2i[i]/r2[] *)
DefTensor[y12i[i],{E3,t},PrintAs -> "\!\(y\_12\)"]; (* separation vector of the 2 point-bodies *)
DefTensor[r12[],{E3,t},PrintAs->"\!\(r\_12\)"]; (* norm of r12i[i] *)
DefTensor[n12i[i],{E3,t},PrintAs->"\!\(n\_12\)"]; (* r12i[i]/r12[] *)
DefTensor[v1i[i],{E3,t},PrintAs -> "\!\(v\_1\)"]; (* velocity vector of the first point-body *)
DefTensor[v2i[i],{E3,t},PrintAs -> "\!\(v\_2\)"]; (* velocity vector of the second point-body *)
DefTensor[v12i[i],{E3,t},PrintAs -> "\!\(v\_12\)"]; (* relative velocity vector *)
DefTensor[a1i[i],{E3,t},PrintAs -> "\!\(a\_1\)"]; (* acceleration vector of the first point-body *)
DefTensor[a2i[i],{E3,t},PrintAs -> "\!\(a\_2\)"]; (* acceleration vector of the second point-body *)
DefTensor[p1i[i],{E3,t},PrintAs -> "\!\(p\_1\)"]; (* canonical momentum of the first point-body *)
DefTensor[p2i[i],{E3,t},PrintAs -> "\!\(p\_2\)"]; (* canonical momentum of the second point-body *)
DefTensor[S1i[i],{E3,t},PrintAs -> "\!\(S\_1\)"]; (* spin vector of the first point-body *)
DefTensor[S2i[i],{E3,t},PrintAs -> "\!\(S\_2\)"]; (* spin vector of the second point-body *)
DefTensor[S1ij[i,j],{E3,t},Antisymmetric[{i,j}],PrintAs -> "\!\(S\_1\)"]; (* spin tensor of the first point-body *)
DefTensor[S10i[i],{E3,t},PrintAs -> "\!\(S\_1\^0\)"]; (* spin tensor of the first point-body *)
DefTensor[S2ij[i,j],{E3,t},Antisymmetric[{i,j}],PrintAs -> "\!\(S\_2\)"]; (* spin tensor of the second point-body *)
DefTensor[S20i[i],{E3,t},PrintAs -> "\!\(S\_2\^0\)"]; (* spin tensor of the second point-body *)
DefTensor[S1di[i],{E3,t},PrintAs ->"\!\(\*SubscriptBox[OverscriptBox[\"S\", \".\"], \"1\"]\)"]; (* time derivative of the first body spin vector *)
DefTensor[S2di[i],{E3,t},PrintAs -> "\!\(\*SubscriptBox[OverscriptBox[\"S\", \".\"], \"2\"]\)"]; (* time derivative of the second body spin vector *)
DefTensor[S1dij[i,j],{E3,t},PrintAs ->"\!\(\*SubscriptBox[OverscriptBox[\"S\", \".\"], \"1\"]\)"]; (* time derivative of the first body spin vector *)
DefTensor[S2dij[i,j],{E3,t},PrintAs ->"\!\(\*SubscriptBox[OverscriptBox[\"S\", \".\"], \"2\"]\)"]; (* time derivative of the first body spin vector *)
DefTensor[Sn[],{E3,t},PrintAs -> "\!\(S\_n\)"]; (* symmetric spin vector projection onto nCM *)
DefTensor[S\[Lambda][],{E3,t},PrintAs -> "\!\(S\_\[Lambda]\)"];(* symmetric spin vector projection onto \[Lambda]CM *)
DefTensor[Sl[],{E3,t},PrintAs -> "\!\(S\_l\)"];(* symmetric spin vector projection onto lCM *)
DefTensor[Sigman[],{E3,t},PrintAs -> "\!\(\[CapitalSigma]\_n\)"];(* antisymmetric spin vector projection onto nCM *)
DefTensor[Sigma\[Lambda][],{E3,t},PrintAs -> "\!\(\[CapitalSigma]\_\[Lambda]\)"];(* antisymmetric spin vector projection onto \[Lambda]CM *)
DefTensor[Sigmal[],{E3,t},PrintAs -> "\!\(\[CapitalSigma]\_l\)"];(* antisymmetric spin vector projection onto lCM *)
DefTensor[yCMi[i],{E3,t},PrintAs->"y"]; (* separation vector of the 2 point-bodies in the COM *)
DefTensor[rCM[],{E3,t},PrintAs->"r"]; (* norm of yCMi[i] in the COM *)
DefTensor[nCMi[i],{E3,t},PrintAs->"n"]; (* yCM[i]/rCM[] in the COM *)
DefTensor[lCMi[i],{E3,t},PrintAs->"l"]; (* (nCM x vCM)[i]/|nCM x vCM| in the COM *)
DefTensor[\[Lambda]CMi[i],{E3,t},PrintAs->"\[Lambda]"]; (* (lCM x nCM)[i] in the COM *)
DefTensor[vCMi[i],{E3,t},PrintAs -> "v"]; (* relative velocity vector in the COM *)
DefTensor[aCMi[i],{E3,t},PrintAs -> "a"];(* relative acceleration vector in the COM *)
DefTensor[x[],{E3,t},PrintAs -> "x"]; (* PN frequency variable *)
DefTensor[Si[i],{E3,t},PrintAs->"S"]; (* symmetric total spin *)
DefTensor[Sigmai[i],{E3,t},PrintAs->"\[CapitalSigma]"]; (* antisymmetric spin mtot(S2i[i]/m2-S1i[i]/m1) *)
DefTensor[SdCMi[i],{E3,t},PrintAs -> "\!\(\*OverscriptBox[\"S\", \".\"]\)"]; (* time derivative of Si[i] in the COM *)
DefTensor[SigmadCMi[i],{E3,t},PrintAs -> "\!\(\*OverscriptBox[\"\[CapitalSigma]\", \".\"]\)"]; (* time derivative of Sigmai[i] in the COM *)


\[Delta]/: \[Delta]^m_Integer:=(1-4\[Nu])^Floor[m/2] \[Delta]^Mod[m,2] /; m>1; (* expression of powers of \[Delta] in terms of \[Nu] and \[Delta] itself *)


ni/:ni[i_] ni[-i_]:=1; (* unit character of ni[i] *)
n1i/:n1i[i_] n1i[-i_]:=1; (* unit character of n1i[i] *)
n2i/:n2i[i_] n2i[-i_]:=1; (* unit character of n2i[i] *)
n12i/:n12i[i_] n12i[-i_]:=1; (* unit character of n12i[i] *)
nCMi/:nCMi[i_]nCMi[-i_]:=1; (* unit character of nCMi[i] *)
\[Lambda]CMi/:\[Lambda]CMi[i_]\[Lambda]CMi[-i_]:=1; (* unit character of \[Lambda]CMi[i] *)
lCMi/:lCMi[i_]lCMi[-i_]:=1; (* unit character of lCMi[i] *)
nCMi/: nCMi[i_] \[Lambda]CMi[-i_]:=0; (* orthogonality of nCMi[i] and \[Lambda]CMi[i] *)
nCMi/: nCMi[-i_] \[Lambda]CMi[i_]:=0; (* orthogonality of nCMi[i] and \[Lambda]CMi[i] *)
nCMi/: nCMi[i_] lCMi[-i_]:=0; (* orthogonality of nCMi[i] and lCMi[i] *)
nCMi/: nCMi[-i_] lCMi[i_]:=0; (* orthogonality of nCMi[i] and lCMi[i] *)
lCMi/: \[Lambda]CMi[i_]lCMi[-i_]:=0;(* orthogonality of \[Lambda]CMi[i] and lCMi[i] *)
lCMi/: \[Lambda]CMi[-i_]lCMi[i_]:=0;(* orthogonality of \[Lambda]CMi[i] and lCMi[i] *)

r1i[i_]=r1[]n1i[i]; (* r1i[i] expression in terms of r1[], n1i[i] *)
r2i[i_]=r2[]n2i[i]; (* r2i[i] expression in terms of r2[], n2i[i] *)
xi[i_]=r[]ni[i]; (* xi[i] expression in terms of r[], ni[i] *)
yCMi[i_]=rCM[]nCMi[i]; (* yCMi[i] expression in terms of rCM[], nCMi[i] *)
y12i[i_]=r12[]n12i[i]; (* y12i[i] expression in terms of r12[], n12i[i] *)
v12i[i_]=v1i[i]-v2i[i]; (* v12i[i] expression in terms of v1i[i], v2i[i] *)


DefTensor[STFn1L[AnyIndices@TangentE3],{E3,t}];

SymmetryGroupOfTensor[STFn1L[indices__]]^:=Symmetric[Range@Length@{indices}];

STFn1L[___,a_,___,-a_,___]:=0;
STFn1L[___,-a_,___,a_,___]:=0;

STFn1L[]:=1;

PrintAs[STFn1L] ^="\!\(\*SubscriptBox[OverscriptBox[\(n\), \(^\)], \(1\)]\)";


DefTensor[STFn2L[AnyIndices@TangentE3],{E3,t}];

SymmetryGroupOfTensor[STFn2L[indices__]]^:=Symmetric[Range@Length@{indices}];

STFn2L[___,a_,___,-a_,___]:=0;
STFn2L[___,-a_,___,a_,___]:=0;

STFn2L[]:=1;

PrintAs[STFn2L] ^="\!\(\*SubscriptBox[OverscriptBox[\(n\), \(^\)], \(2\)]\)";


DefTensor[STFn12L[AnyIndices@TangentE3],{E3,t}];

SymmetryGroupOfTensor[STFn12L[indices__]]^:=Symmetric[Range@Length@{indices}];

STFn12L[___,a_,___,-a_,___]:=0;
STFn12L[___,-a_,___,a_,___]:=0;

STFn12L[]:=1;

PrintAs[STFn12L] ^="\!\(\*SubscriptBox[OverscriptBox[\(n\), \(^\)], \(12\)]\)";


DefTensor[STFnL[AnyIndices@TangentE3],{E3,t}];

SymmetryGroupOfTensor[STFnL[indices__]]^:=Symmetric[Range@Length@{indices}];

STFnL[___,a_,___,-a_,___]:=0;
STFnL[___,-a_,___,a_,___]:=0;

STFnL[]:=1;

PrintAs[STFnL] ^="\!\(\*OverscriptBox[\(n\), \(^\)]\)";


 STF1xL[indices__]:=(STF1xL[indices]=Arrange[Expand[r[]^Length[{indices}]STFToProduct[STFnL[indices],ni] /. ni[a_]->(y1i[a]+r1i[a])/r[]] /. r[]^mc_?EvenQ:> Scalar@ToCanonical[(y1i[a]+r1i[a])(y1i[-a]+r1i[-a])]^(mc/2)]);


DefTensor[YL[AnyIndices@TangentE3],{E3,t}]; 


DefTensor[dirac1[AnyIndices@TangentE3],{E3,t},PrintAs->"\!\(\*SubscriptBox[\(\[Delta]\), \(1\)]\)"]; 
SymmetryGroupOfTensor[dirac1[indices__]]^:=Symmetric[Range@Length@{indices}];

dirac1/:PD[i_][dirac1[indices___]]:=dirac1[indices,i];
dirac1/:ParamD[t][dirac1[indices___]]:=-Module[{i},PutScalar[v1i[i] dirac1[indices,-i]]];


DefTensor[dirac2[AnyIndices@TangentE3],{E3,t},PrintAs->"\!\(\*SubscriptBox[\(\[Delta]\), \(2\)]\)"];
SymmetryGroupOfTensor[dirac2[indices__]]^:=Symmetric[Range@Length@{indices}];

dirac2/:PD[i_][dirac2[indices___]]:=dirac2[indices,i];
dirac2/:ParamD[t][dirac2[indices___]]:=-Module[{i},PutScalar[v2i[i] dirac2[indices,-i]]];


(* turn on definition messages *)
SetOptions[DefManifold,DefInfo->{"manifold",""}];
SetOptions[DefVBundle,DefInfo->{"vbundle",""}];
SetOptions[DefParameter,DefInfo->True];
SetOptions[DefMetric,DefInfo->{"",""}];
SetOptions[DefTensor,DefInfo->{"constant symbol",""}];
SetOptions[DefConstantSymbol,DefInfo->{"constant symbol",""}];


(* list of PNComBin valid variables *)

listexpr1={r1[],n1i[a],y1i[a],v1i[a],a1i[a],S1i[a],S1di[a],S1ij[a,b],S10i[a],S1dij[a,b],p1i[a],m1,\[Kappa]1,r1p,s1,n12i[a],nCMi[a],vCMi[a],aCMi[a],Sigmai[a],SigmadCMi[a],\[Delta],dirac1[i]}; (* list of variables depending on the first point-body that are affected by the exchange 1<->2 *)
listexpr2={r2[],n2i[a],y2i[a],v2i[a],a2i[a],S2i[a],S2di[a],S2ij[a,b],S20i[a],S2dij[a,b],p2i[a],m2,\[Kappa]2,r2p,s2,-n12i[a],-nCMi[a],-vCMi[a],-aCMi[a],-Sigmai[a],-SigmadCMi[a],-\[Delta],dirac2[i]};
(* list of variables depending on the second point-body that are affected by the exchange 1<->2 *)
listexpr0={G,c,r12[],r[],rCM[],ni[a],Si[a],SdCMi[a],Metricdelta,epsilonMetricdelta,mtot,\[Nu],r0p,r0,\[Epsilon],\[Lambda],\[Kappa],\[Zeta],\[Xi]}; (* list of variables left unaffected by the exchange 1<->2 *)
listexpr12=listexpr1~Join~Select[listexpr2,Not@MemberQ[listexpr1,-#]&]; (* list of variables that are affected by the exchange 1<->2 *)

(* final rule *)

ruleexchange12=Thread[(listexpr12  /. {a->a_,b->b_,i->i___})-> listexpr2~Join~Select[listexpr1,Not@MemberQ[listexpr2,-#]&]]~Join~{STFn1L->STFn2L,STFn2L->STFn1L,STFn12L[a___]:>(-1)^Length[{a}]STFn12L[a]};


(* rule decomposing vectors y1i, y2i in terms of r1, n1i, r2, n2i *)

ruleytounit={y1i[i_]->r[] ni[i]-r1[] n1i[i],y2i[i_]->r[] ni[i]-r2[] n2i[i]};

(* rule expressing r1[], n1i[i], r2[] and n2i[i] in terms of r[] and ni[i] *)

ruler1n1r2n2torn={r1[]->(r[]^2-2 r[]  Scalar[ni[i] y1i[-i]]+Scalar[y1i[i]y1i[-i]])^(1/2),n1i[i_]->(r[] ni[i]- y1i[i])/(r[]^2-2 r[]  Scalar[ni[i] y1i[-i]]+Scalar[y1i[i]y1i[-i]])^(1/2),r2[]->(r[]^2-2 r[]  Scalar[ni[i] y2i[-i]]+Scalar[y2i[i]y2i[-i]])^(1/2),n2i[i_]->(r[] ni[i]-y2i[i])/(r[]^2-2 r[]  Scalar[ni[i] y2i[-i]]+Scalar[y2i[i]y2i[-i]])^(1/2)};

(* rule expressing r2[] and n2i[i] in terms of r1[] and n1i[i] *)

ruler2n2tor1n1={r2[]->(r1[]^2+2 r1[] r12[] Scalar[n1i[i] n12i[-i]]+r12[]^2)^(1/2),n2i[i_]->(r12[] n12i[i]+r1[] n1i[i])/(r1[]^2+2 r1[] r12[] Scalar[n1i[j] n12i[-j]]+r12[]^2)^(1/2)};

(* rule expressing r1[] and n1i[i] in terms of r2[] and n2i[i] *)

ruler1n1tor2n2={r1[]->(r2[]^2-2 r2[] r12[] Scalar[n2i[i] n12i[-i]]+r12[]^2)^(1/2),n1i[i_]->(-r12[] n12i[i]+r2[] n2i[i])/(r2[]^2-2 r2[] r12[] Scalar[n2i[j] n12i[-j]]+r12[]^2)^(1/2)};

ruler1n1r2n2tornhad={r1[]->r[](1-2  Scalar[ni[i] y1i[-i]]/r[]+Scalar[y1i[i]y1i[-i]]/r[]^2)^(1/2),n1i[i_]->(r[] ni[i]- y1i[i])/r[]/(1-2 Scalar[ni[i] y1i[-i]]/r[]+Scalar[y1i[i]y1i[-i]]/r[]^2)^(1/2),r2[]->r[](1-2 Scalar[ni[i] y2i[-i]]/r[]+Scalar[y2i[i]y2i[-i]]/r[]^2)^(1/2),n2i[i_]->(r[] ni[i]-y2i[i])/r[]/(1-2 Scalar[ni[i] y2i[-i]]/r[]+Scalar[y2i[i]y2i[-i]]/r[]^2)^(1/2)};

ruler2n2tor1n1had1={r2[]->r12[] Sqrt[r1[]^2/r12[]^2+1+2 r1[]/r12[] Scalar[n1i[i] n12i[-i]]],n2i[i_]->(n1i[i] r1[]+n12i[i] r12[])/r12[]/Sqrt[r1[]^2/r12[]^2+1+2 r1[]/r12[] Scalar[n1i[j]*n12i[-j]]]};

ruler1n1tor2n2had2={r1[]->r12[] Sqrt[r2[]^2/r12[]^2+1-2 r2[]/r12[] Scalar[n2i[i] n12i[-i]]],n1i[i_]->(n2i[i] r2[]-n12i[i] r12[])/r12[]/Sqrt[r2[]^2/r12[]^2+1-2 r2[]/r12[] Scalar[n2i[j] n12i[-j]]]};

(* rule replacing the variables y1i[i], y2i[i], v1i[i], v2i[i] by their COM counterparts *)

ruley1toy12={y2i[k_]->-r12[] n12i[k]+y1i[k]};


rulen12n1=MakeRule[{n1i[a] n12i[-a],(r1[]+r2[]+r12[])(r2[]-r1[]-r12[])/(2r1[]r12[])+1},MetricOn->All,TestIndices->False];

rulen12n2=MakeRule[{n12i[a] n2i[-a],(r1[]+r2[]+r12[])(r12[]+r2[]-r1[])/(2r12[]r2[])-1},MetricOn->All,TestIndices->False];

rulen1n2=MakeRule[{n1i[a]n2i[-a],(r1[]+r2[]+r12[])(r1[]+r2[]-r12[])/(2 r1[] r2[])-1},MetricOn->All,TestIndices->False];


rule12toCOM={n12i[k_]->nCMi[k],r12[]->rCM[],m1->mtot (1+\[Delta])/2,m2->mtot (1-\[Delta])/2,S1i[i_]->(1+\[Delta])/2Si[i]-\[Nu] Sigmai[i],S2i[i_]->(1-\[Delta])/2 Si[i]+\[Nu] Sigmai[i]};


ruleCOM[order_]:={}/;order<0; (* no contribution for negative PN orders *)

ruleCOM[0]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2,v1i[i_]->((1-\[Delta])*vCMi[i])/2,v2i[i_]->-((1+\[Delta])*vCMi[i])/2};(* 0PN order *)

ruleCOM[1]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2,v1i[i_]->((1-\[Delta])*vCMi[i])/2,v2i[i_]->-((1+\[Delta])*vCMi[i])/2};(* 0.5PN order *)

ruleCOM[2]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2,v1i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+((1-\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2,v2i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])-((1+\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2};(* 1PN order *)

ruleCOM[3]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2,v1i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+((1-\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2,v2i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])-((1+\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2};(* 1.5PN order *)

ruleCOM[4]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4),y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4),v1i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4+((1-\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4,v2i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4-((1+\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4};(* 2PN order *)

ruleCOM[5]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4)+(((-8*G^2*mtot^2*\[Delta]*\[Nu])/(5*rCM[])+(4*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/5)*vCMi[i])/c^5,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4)+(((-8*G^2*mtot^2*\[Delta]*\[Nu])/(5*rCM[])+(4*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/5)*vCMi[i])/c^5,v1i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((8*G^3*mtot^3*\[Delta]*\[Nu])/(5*rCM[]^4)-(4*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(5*rCM[]^3)))/c^5+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4+((1-\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4,v2i[i_]->-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((8*G^3*mtot^3*\[Delta]*\[Nu])/(5*rCM[]^4)-(4*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(5*rCM[]^3)))/c^5+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4-((1+\[Delta])*vCMi[i])/2+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4};(* 2.5PN order *)

ruleCOM[6]={y1i[i_]->((1-\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4+(nCMi[i]*rCM[]*((-14351*G^3*mtot^3*\[Delta]*\[Nu])/(1260*rCM[]^3)+(G^3*mtot^3*\[Delta]*\[Nu]^2)/(8*rCM[]^3)-(G^3*mtot^3*\[Delta]*\[Nu]^3)/(2*rCM[]^3)+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1])/(3*rCM[]^3)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2])/(3*rCM[]^3)-(7*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(3*rCM[]^2)+(73*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[]^2)+(4*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2)/rCM[]^2+(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])-(5*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^4)/(8*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(101*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(12*rCM[]^2)-(33*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(3*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2-(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(11*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(53*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[])-(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/rCM[]-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[])+(5*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^3)/16-(11*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^3)/4+6*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^3))/c^6-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4)+(((-8*G^2*mtot^2*\[Delta]*\[Nu])/(5*rCM[])+(4*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/5)*vCMi[i])/c^5+(((-235*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(24*rCM[])-(21*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/12-(19*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/24-(15*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/8+(21*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/4)*vCMi[i])/c^6,y2i[i_]->-((1+\[Delta])*nCMi[i]*rCM[])/2+(nCMi[i]*rCM[]*(-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2))/c^2+(nCMi[i]*rCM[]*((7*G^2*mtot^2*\[Delta]*\[Nu])/(4*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(19*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2))/c^4+(nCMi[i]*rCM[]*((-14351*G^3*mtot^3*\[Delta]*\[Nu])/(1260*rCM[]^3)+(G^3*mtot^3*\[Delta]*\[Nu]^2)/(8*rCM[]^3)-(G^3*mtot^3*\[Delta]*\[Nu]^3)/(2*rCM[]^3)+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1])/(3*rCM[]^3)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2])/(3*rCM[]^3)-(7*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(3*rCM[]^2)+(73*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[]^2)+(4*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2)/rCM[]^2+(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])-(5*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^4)/(8*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(101*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(12*rCM[]^2)-(33*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(3*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2-(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(11*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(53*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[])-(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/rCM[]-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[])+(5*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^3)/16-(11*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^3)/4+6*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^3))/c^6-(7*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*vCMi[i])/(4*c^4)+(((-8*G^2*mtot^2*\[Delta]*\[Nu])/(5*rCM[])+(4*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/5)*vCMi[i])/c^5+(((-235*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(24*rCM[])-(21*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/12-(19*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/24-(15*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/8+(21*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/4)*vCMi[i])/c^6,v1i[i_]:>-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((8*G^3*mtot^3*\[Delta]*\[Nu])/(5*rCM[]^4)-(4*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(5*rCM[]^3)))/c^5+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4+(nCMi[i]*rCM[]*((34547*G^3*mtot^3*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(840*rCM[]^4)-(27*G^3*mtot^3*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(8*rCM[]^4)-(7*G^3*mtot^3*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^4)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(247*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(24*rCM[]^3)-(5*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(24*rCM[]^3)-(9*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^3)/(2*rCM[]^3)-(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^5)/(16*rCM[]^2)+(5*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^5)/(4*rCM[]^2)-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^5)/(16*rCM[]^2)-(12*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^3+(11*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^3)+(11*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[]^3)+(19*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[]^2)-(67*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[]^2)+(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(4*rCM[]^2)-(21*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[]^2)+(41*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(8*rCM[]^2)-(7*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[]^2)))/c^6+((1-\[Delta])/2)*vCMi[i]+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4+(((-21667*G^3*mtot^3*\[Delta]*\[Nu])/(2520*rCM[]^3)+(15*G^3*mtot^3*\[Delta]*\[Nu]^2)/(8*rCM[]^3)-(G^3*mtot^3*\[Delta]*\[Nu]^3)/(2*rCM[]^3)+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1])/(3*rCM[]^3)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2])/(3*rCM[]^3)+(23*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[]^2)+(127*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[]^2)+(4*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2)/rCM[]^2-(19*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^4)/(4*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(4*rCM[]^2)-(75*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(3*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2+(45*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(101*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(11*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(23*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[])-(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/(4*rCM[])-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[])+(5*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^3)/16-(11*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^3)/4+6*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^3)*vCMi[i])/c^6,v2i[i_]:>-(G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[i]*vCMi[-i]])/(2*c^2*rCM[])+(nCMi[i]*rCM[]*((8*G^3*mtot^3*\[Delta]*\[Nu])/(5*rCM[]^4)-(4*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(5*rCM[]^3)))/c^5+(nCMi[i]*rCM[]*((-9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(4*rCM[]^3)-(3*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^3)+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(8*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(4*rCM[]^2)-(9*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2))/c^4+(nCMi[i]*rCM[]*((34547*G^3*mtot^3*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]])/(840*rCM[]^4)-(27*G^3*mtot^3*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]])/(8*rCM[]^4)-(7*G^3*mtot^3*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]])/(2*rCM[]^4)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2]*Scalar[nCMi[i]*vCMi[-i]])/rCM[]^4+(247*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3)/(24*rCM[]^3)-(5*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3)/(24*rCM[]^3)-(9*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^3)/(2*rCM[]^3)-(5*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^5)/(16*rCM[]^2)+(5*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^5)/(4*rCM[]^2)-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^5)/(16*rCM[]^2)-(12*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^3+(11*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^3)+(11*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[]^3)+(19*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[]^2)-(67*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[]^2)+(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^3*Scalar[vCMi[-i]*vCMi[i]])/(4*rCM[]^2)-(21*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[]^2)+(41*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(8*rCM[]^2)-(7*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[]^2)))/c^6-((1+\[Delta])/2)*vCMi[i]+((-(G*mtot*\[Delta]*\[Nu])/(2*rCM[])+(\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/2)*vCMi[i])/c^2+(((7*G^2*mtot^2*\[Delta]*\[Nu])/(2*rCM[]^2)-(G^2*mtot^2*\[Delta]*\[Nu]^2)/(2*rCM[]^2)+(13*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[])+(5*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[])+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(3*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/8-(3*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/2)*vCMi[i])/c^4+(((-21667*G^3*mtot^3*\[Delta]*\[Nu])/(2520*rCM[]^3)+(15*G^3*mtot^3*\[Delta]*\[Nu]^2)/(8*rCM[]^3)-(G^3*mtot^3*\[Delta]*\[Nu]^3)/(2*rCM[]^3)+(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r1])/(3*rCM[]^3)-(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r1])/(3*rCM[]^3)-(11*G^3*mtot^3*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(11*G^3*mtot^3*\[Delta]*\[Nu]*Log[rCM[]/r2])/(3*rCM[]^3)+(22*G^3*mtot^3*\[Nu]^2*Log[rCM[]/r2])/(3*rCM[]^3)+(23*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2)/(4*rCM[]^2)+(127*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2)/(8*rCM[]^2)+(4*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2)/rCM[]^2-(19*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^4)/(4*rCM[])+(21*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^4)/(16*rCM[])+(9*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]])/(4*rCM[]^2)-(75*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]])/(8*rCM[]^2)+(3*G^2*mtot^2*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]])/rCM[]^2+(45*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(101*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(16*rCM[])-(11*G*mtot*\[Delta]*\[Nu]^3*Scalar[nCMi[i]*vCMi[-i]]^2*Scalar[vCMi[-i]*vCMi[i]])/(2*rCM[])+(23*G*mtot*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^2)/(16*rCM[])-(7*G*mtot*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^2)/(4*rCM[])-(15*G*mtot*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^2)/(2*rCM[])+(5*\[Delta]*\[Nu]*Scalar[vCMi[-i]*vCMi[i]]^3)/16-(11*\[Delta]*\[Nu]^2*Scalar[vCMi[-i]*vCMi[i]]^3)/4+6*\[Delta]*\[Nu]^3*Scalar[vCMi[-i]*vCMi[i]]^3)*vCMi[i])/c^6};(* 3PN order *)


ruleCOMspin[order_]:={}/;order<0||order>3; (* no contribution for negative PN orders; empty rule due to unknown contributions beyond the 1.5PN order *)

ruleCOMspin[0]=ruleCOM[0];(* 0PN order *)

ruleCOMspin[1]=ruleCOM[1];(* 0.5PN order *)

ruleCOMspin[2]=ruleCOM[2];(* 1PN order *)

ruleCOMspin[3]=IndexRule@@@Transpose[Transpose[List@@@ruleCOM[3]]+{0,{\[Nu]/(mtot c^3) epsilonMetricdelta[i,-j,-k]vCMi[j] Sigmai[k],\[Nu]/(mtot c^3) epsilonMetricdelta[i,-j,-k]vCMi[j] Sigmai[k],-G \[Nu]/c^3/rCM[]^2epsilonMetricdelta[i,-j,-k] nCMi[j] Sigmai[k],-G \[Nu]/c^3/rCM[]^2epsilonMetricdelta[i,-j,-k] nCMi[j] Sigmai[k]}}];(* 1.5PN order *)
(* the rules of replacement for v1i[i] and v2i[i] are given at the 2PN order only and should be extended to 3PN; the rules for the separation r12[] and the canonical momenta p1i[i], p2i[i] should also be included *)

(* rule eliminating y2i[i] in terms of y1i[i], r12[], n12i[i] *)



rule\[Gamma]toxcirc[0]={\[Gamma]->x[]};
rule\[Gamma]toxcirc[1]=rule\[Gamma]toxcirc[0];
rule\[Gamma]toxcirc[2]=MapAt[Plus[#,x[]^2*(1-\[Nu]/3)]&,rule\[Gamma]toxcirc[1],{1,2}];
rule\[Gamma]toxcirc[3]=rule\[Gamma]toxcirc[2];
rule\[Gamma]toxcirc[4]=MapAt[Plus[#,x[]^3*(1-(65*\[Nu])/12)]&,rule\[Gamma]toxcirc[3],{1,2}];
rule\[Gamma]toxcirc[5]=rule\[Gamma]toxcirc[4];
rule\[Gamma]toxcirc[6]=MapAt[Plus[#,x[]^4*(1+(229*\[Nu]^2)/36+\[Nu]^3/81+\[Nu]*(-2203/2520-(41*Pi^2)/192-(22*Log[G mtot/(r0 c^2)/x[]])/3))]&,rule\[Gamma]toxcirc[5],{1,2}];
rule\[Gamma]toxcirc[7]=rule\[Gamma]toxcirc[6];
rule\[Gamma]toxcirc[order_]:={}/;order<0||order>7;


rule\[Gamma]toxcircspin[0]=rule\[Gamma]toxcirc[0];
rule\[Gamma]toxcircspin[1]=rule\[Gamma]toxcirc[1];
rule\[Gamma]toxcircspin[2]=rule\[Gamma]toxcirc[2];
rule\[Gamma]toxcircspin[3]=MapAt[Plus[#,x[]^(5/2)*((5*Sl[])/(3*G*mtot^2)+(\[Delta]*\[CapitalSigma]l[])/(G*mtot^2))]&,rule\[Gamma]toxcircspin[2],{1,2}];
rule\[Gamma]toxcircspin[4]=MapAt[Plus[#,x[]^3*(1-(Sn[]^2+S\[Lambda][]^2+Sl[]^2)/(2*G^2*mtot^4)-(\[Delta]*(Sn[]Sigman[]+S\[Lambda][]Sigma\[Lambda][]+Sl[]Sigmal[]))/(2*G^2*mtot^4)+(3*Sl[]^2)/(2*G^2*mtot^4)+(3*\[Delta]*Sl[]*\[CapitalSigma]l[])/(2*G^2*mtot^4)+\[Nu]*(-65/12+(Sigman[]^2+Sigma\[Lambda][]^2+Sigmal[]^2)/(2*G^2*mtot^4)-(3*\[CapitalSigma]l[]^2)/(2*G^2*mtot^4)))]&,rule\[Gamma]toxcircspin[3],{1,2}];
rule\[Gamma]toxcircspin[5]=MapAt[Plus[#,x[]^(7/2)*((13*Sl[])/(3*G*mtot^2)+(3*\[Delta]*\[CapitalSigma]l[])/(G*mtot^2)+\[Nu]*((2*Sl[])/(9*G*mtot^2)-(\[Delta]*\[CapitalSigma]l[])/(3*G*mtot^2)))]&,rule\[Gamma]toxcircspin[4],{1,2}];
rule\[Gamma]toxcircspin[order_]:={}/;order<0||order>5; 


rulemixedproductCOM=Join[MakeRule[{epsilonMetricdelta[i,-j,-k]lCMi[j]\[Lambda]CMi[k],-nCMi[i]},MetricOn->All,ContractMetrics->True],MakeRule[{epsilonMetricdelta[i,-j,-k]nCMi[j]\[Lambda]CMi[k],lCMi[i]},MetricOn->All,ContractMetrics->True],MakeRule[{epsilonMetricdelta[i,-j,-k]lCMi[j]nCMi[k],\[Lambda]CMi[i]},MetricOn->All,ContractMetrics->True]];


SetAttributes[HoldPN,HoldAll];


SetAttributes[PutDefinition,HoldRest];

PutDefinition[strg_String,{expr__Symbol}]:=((HoldPN[PutAppend[Definition[#],strg]]&)/@(HoldPattern/@Unevaluated[{expr}]) /. HoldPN[arg_]->arg;Null;)

PutDefinition[strg_,expr_Symbol]:=PutDefinition[strg,{expr}];


toloop[func_,expr_]:=Module[

{exp=Expand/@expr,resloop},

If[Head[exp]===Plus,

resloop={};Do[AppendTo[resloop,Expand@func[exp[[ic]]]],
{ic,Length[exp]}];Plus@@resloop,

resloop=Expand@func[exp]]];


seriesloop[expr_,arg_,opts___?OptionQ]:=Module[

{resloop},

If[Head[expr]===Plus,

resloop={};Do[AppendTo[resloop,Expand@Normal@Series[expr[[ic]],arg,opts]],
{ic,Length[expr]}];Expand[Plus@@resloop],

resloop=Expand@Normal@Series[expr,arg,opts]]];


integrateloop[expr_,arg_,opts___?OptionQ]:=Module[

{exp=Expand[expr],resloop},

If[Head[exp]===Plus,

resloop={};Do[AppendTo[resloop,Expand@Integrate[exp[[ic]],arg,opts]],
{ic,Length[exp]}];Plus@@resloop,

resloop=Expand@Integrate[exp,arg,opts]]];


Truncate[expr_,order_Integer]:=Module[{\[Epsilon]PN},seriesloop[expr/. Scalar[var_]:>Scalar@Expand[var]/. {x[]->\[Epsilon]PN^2 x[],c->c/\[Epsilon]PN},{\[Epsilon]PN,0,order}]/. \[Epsilon]PN->1];


(* default options for LogExpand: r1[], r12[], r0, s1, s2>0 *)

Options[LogExpand]={Assumptions->0<r1[]&& 0<r12[]&& 0<r0&&0<s1&&0<s2};

(* main definition for LogExpand *)

LogExpand[expr_,opts___]:=Module[

{assmpts=Assumptions/. Flatten[{opts}]/. Options[LogExpand], logpowerexpand},

logpowerexpand[Log[arg_]]:=PowerExpand[Log@Factor[arg],Assumptions->assmpts]/. Log[var_Integer]:>Plus@@(#2 Log[#1]&)@@@FactorInteger[var];

Expand[expr /. {Log[arg_]:>logpowerexpand[Log[arg]],PolyLog[2,arg_]:>-PolyLog[2,Factor[1-arg]]+Pi^2/6-logpowerexpand[Log[arg]]logpowerexpand[Log[arg-1]]-logpowerexpand[Log[arg]] I Pi /; Refine[arg>1,assmpts],PolyLog[2,arg_]:>PolyLog[2,Factor[arg]]}]

]; 
(* the logarithms are expanded by means of PowerExpand with the assumptions given in the variable assmpts; the logarithms of non-prime integers are expanded in a similar way; the dilogarithms with arguments greater than 1 are replaced according to the formula: PolyLog[2,arg]=-PolyLog[2,1-arg]+Pi^2/6-Log[arg]Log[arg-1]-Log[arg] I Pi *)


(* lofactor[expr]: main function called by Logfactor *)

logfactor[(sum_/; sum===Plus)[expr1___,fac1_.  Log[arg1:Except[_Integer]],expr2___, fac2_. Log[arg2:Except[_Integer]],expr3___]]:=logfactor[expr1+expr2+expr3]+logfactor[fac1] Log[arg1 /arg2]/;  fac1===-fac2; (* action on a product *)

logfactor[expr_]:=expr; (* action for other types of expressions *)

LogFactor[expr_]:=logfactor@Expand[expr]; (* calling of logfactor after expansion of the argument *)


samedummies[expr_Plus]:=samedummies/@expr; (* linearity *)

samedummies[expr_]:=Module[{dummyindexlist=List@@FindDummyIndices[expr],ruledummyindices},
ruledummyindices=Thread[Rule[dummyindexlist,GetIndicesOfVBundle[TangentE3,Length[dummyindexlist],FindFreeIndices[expr]/. -ind_Symbol->ind]]];
expr /.ruledummyindices /. Scalar[arg_]:> Scalar@samedummies[arg]]; (* replacement of dummy indices in monomials *)


Options[PutScalarProduct]={canonicalize->False}; (* boolean option for PutScalarProduct which tells whether ToCanonical should be used on expressions involving contractions with the Levi-Civita tensor *)


(* putscalarproductexpanded[expr]: main function called by PutScalarProduct *)

putscalarproductexpanded[expr_Plus,canfun_]:=putscalarproductexpanded[#,canfun]&/@expr; (* linearity *)

putscalarproductexpanded[vector1_Symbol?xTensorQ[ind_] vector2_Symbol?xTensorQ[-ind_] rest_.,canfun_]:=Scalar@canfun[vector1[ind] vector2[-ind]] putscalarproductexpanded[rest,canfun]; (* action on a product of factors involving a scalar product *)

putscalarproductexpanded[epsilonMetricdelta[inds__]rest_.,canfun_]:=restepsilon[rest,{inds},epsilonMetricdelta[inds],canfun]; (* switch to some other algorithm, implemented by means of the function restepsilon whenever epsilonMetricdelta is found in a product; the third argument of restepsilon represents the expression to be put inside Scalar; the second argument lists the indices of the third; the fourth argument is the canonicalization function to be applied on monomials invloving contractions with the Levi-Civita tensor *)

restepsilon[expr_,{},vecs_,canfun_]:=Scalar@canfun[vecs] putscalarproductexpanded[expr,canfun]; (* definition of restepsilon when its second argument is empty i.e. when vecs is a scalar *)

restepsilon[vector_Symbol?xTensorQ[ind_],{-ind_},vecs_,canfun_]:=Scalar@canfun[vecs vector[ind]]; (* definition of restepsilon when its second argument is a vector contracted with the third argument *)

restepsilon[(prod_ /; prod===Times)[rest1___,vector_Symbol?xTensorQ[ind_], rest2___],{inds__},vecs_,canfun_]:=Module[

{shortlist=DeleteCases[{inds},-ind]},

restepsilon[Times[rest1, rest2],shortlist,vecs vector[ind],canfun]/;shortlist=!={inds}

]; (* definition of restepsilon the number of indices entering the third argument can be reduced by contraction with a tensor entering the first argument; the attributes of the product arising in the left-hand side of the above assignment are hidden by substituting (prod_ /; prod===Times) to the original function Times in order to reduce the number of times this definition will be applied *)

restepsilon[expr_,{inds__},vecs_,canfun_]:=canfun[vecs] putscalarproductexpanded[expr,canfun];  (* action of restepsilon when the third argument cannot be turned out into a scalar quantity *)

putscalarproductexpanded[expr_,canfun_]:=expr; (* action of putscalarproductexpanded for other types of expressions *)

PutScalarProduct[expr_,opts___?OptionQ]:=putscalarproductexpanded[Expand[expr],canonicalize/. Flatten[{opts}]/. Options[PutScalarProduct]/. True-> ToCanonical/. False->Identity];(* calling of putscalarproductexpanded after expansion of the argument; canonicalization turned on if canonicalize=True *)


contractmetricloop[expr_]:=Module[

{resloop},

If[Head[expr]===Plus,

resloop=0;Do[resloop+=ToCanonical@PutScalarProduct@ContractMetric[expr[[ic]]],{ic,Length[expr]}];resloop,

resloop=ToCanonical@PutScalarProduct@ContractMetric[expr]]]


Arrange[expr_]:=Validate[contractmetricloop[(expr/. Scalar[arg_]:>Scalar@Expand[arg])]//samedummies//ScreenDollarIndices];


Unsymmetrize[0]:=0;

Unsymmetrize[expr_]:=Module[{expression,indiceslist,indicesposition,indicesorder},

expression=Expand[expr];

Validate[expression];

Map[

(indiceslist:=FindFreeIndices[Evaluate[#]];

indicesposition:=List@@Map[Function[z,First@Position[#/. Scalar[arg_]->1,z]],indiceslist];
indicesorder:=indicesposition/.Thread[Evaluate@Sort[indicesposition]:>Evaluate@Range@Length[indicesposition]];

ReplaceIndex[#,Thread[Evaluate[List@@indiceslist]:> Evaluate[Array[Function[z,indiceslist[[indicesorder[[z]]]]],Length[indiceslist]]]]])&,


expression,


{If[Head[expression]=!=Plus,0,1]}]

]; (* the function mapped on expr when it is a sum makes the following operations: (1) build a list indiceslist of indices sorted in canonical order; (2) builds the list of indices positions in the monomial it is applied to; (3) makes a list indicesorder where the positions given by the previous list are relabelled with the smallest possible positive integers; 
(4) replaces the first index i1 of indiceslist by the index j1 having the same rank in indiceslist as i1 had in the orginial expression i.e. the rank indicesorder[[1]], and similarly for the second index, the third index... *)


CrushSTF[expr_]:=Module[

{indexlist=List@@FindFreeIndices@Evaluate[expr]},

Unsymmetrize[expr/. 

{Metricdelta[ind1_,ind2_]:>0 /;MatchQ[Intersection[{ind1,ind2},indexlist],_List?(Length[#]==2&)],epsilonMetricdelta[ind1_,ind2_,ind3_]:> 0 /; MatchQ[Intersection[{ind1,ind2,ind3},indexlist],_List?(Length[#]>=2&)]}
]

]; (* calling of Unsymmetize and deletion of free indices arising by pairs in Metricdelta and epsilonMetricdelta *)


(*Symmetrization of metric products*)(*Argument is the product of metric tensors that user want to symmetrize*)

SymmetrizeMetricProduct[expr_]:=(Module[

{symmmetric,symmetrization,res,indexlist,pind,generatedindexlist,blankindexlist,blankexp},

indexlist=List@@FindFreeIndices[expr];

pind=Length[indexlist];

generatedindexlist=GetIndicesOfVBundle[TangentE3,pind];

blankindexlist=Map[Pattern[#,Blank[]]&,generatedindexlist];

blankexp=expr/.Thread[indexlist->blankindexlist];


symmmetric[{}]=1;
symmmetric[{list__}]:=(If[OddQ[Length[{list}]],0,Sum[Metricdelta[First[{list}],{list}[[ind]]] symmmetric[Drop[Drop[{list},{ind}],{1}]],{ind,2,Length[{list}]}]]);

symmetrization=Expand@symmmetric[indexlist];

res=If[pind<=2,symmetrization,symmetrization/Length[symmetrization]];


DownValues[SymmetrizeMetricProduct]=Append[Sort[Append[Most@DownValues[SymmetrizeMetricProduct],HoldPattern[SymmetrizeMetricProduct[HoldPN[blankexp]]]:>Evaluate[res/.Thread[indexlist->generatedindexlist]]/.HoldPN[blankexp]->blankexp],ByteCount[#1]<ByteCount[#2]&],Last@DownValues[SymmetrizeMetricProduct]];
res;

res])/;MatchQ[expr,HoldPattern[Times[(Metricdelta|delta)[_,_]...]|Metricdelta[_,_]|delta[_,_]|1]];

(* the final condition MatchQ[...] ensures that the function is not defined unless expr has the form of a product of Metricdelta or delta tensors;  the curly bracket operator symmetric[{list}] is defined iteratively by its initial value symmmetric[{}]=1 and the recurrence relation giving symmmetric[{list__}] for arguments of length \[GreaterEqual] 1; if the expression is made of exactly one metric factor, the result produced by the action of the curly brackets on expr coincides with its symmetrized form, but if not, both quantities differ by a factor equal to the number of terms of the final output; the rest of the above definition deals with the memorisation procedure *)


A1i[i_,order_]:=0/;order<0; (* no contribution for negative PN orders *)


A1i[i_,0]=-((G*m2*n12i[i])/r12[]^2); (* 0PN order *)


A1i[i_,1]=A1i[i,0]+0; (* 0.5PN order *)


A1i[i_,2]=A1i[i,1]+Expand[((5*G^2*m1*m2*n12i[i])/r12[]^3+(4*G^2*m2^2*n12i[i])/r12[]^3-(G*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]])/r12[]^2+(3*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(2*r12[]^2)+(4*G*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/r12[]^2+(4*G*m2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/r12[]^2-(3*G*m2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^2-(4*G*m2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/r12[]^2+(3*G*m2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^2)/c^2]; (* 1PN order *)


A1i[i_,3]=A1i[i,2]+0;(* 1.5PN order *)


A1i[i_,4]=A1i[i,3]+Expand[((-57*G^3*m1^2*m2*n12i[i])/(4*r12[]^4)-(69*G^3*m1*m2^2*n12i[i])/(2*r12[]^4)-(9*G^3*m2^3*n12i[i])/r12[]^4+(39*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/(2*r12[]^3)+(2*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/r12[]^3-(15*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]])/(4*r12[]^3)-(39*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^3-(4*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^3+(17*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(2*r12[]^3)-(6*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/r12[]^3+(3*G*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^2)/(2*r12[]^2)-(15*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^4)/(8*r12[]^2)-(5*G^2*m1*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/(2*r12[]^3)-(8*G^2*m2^2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/r12[]^3-(6*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v1i[a]*v2i[-a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]^2)/r12[]^2+(5*G^2*m1*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/(4*r12[]^3)+(4*G^2*m2^2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/r12[]^3+(9*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v2i[-a]*v2i[a]])/(2*r12[]^2)+(4*G*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]]^2)/r12[]^2-(63*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/(4*r12[]^3)-(2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/r12[]^3+(55*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(4*r12[]^3)-(2*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^3+(G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^2-(6*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v1i[i])/r12[]^2+(9*G*m2*Scalar[n12i[a]*v2i[-a]]^3*v1i[i])/(2*r12[]^2)-(4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^2+(4*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^2+(4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2-(5*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2+(63*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(4*r12[]^3)+(2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/r12[]^3-(55*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(4*r12[]^3)+(2*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^3-(G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^2+(6*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v2i[i])/r12[]^2-(9*G*m2*Scalar[n12i[a]*v2i[-a]]^3*v2i[i])/(2*r12[]^2)+(4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^2-(4*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^2-(4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2+(5*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2)/c^4];(* 2PN order *)


A1i[i_,5]=A1i[i,4]+Expand[((-24*G^3*m1^2*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]])/(5*r12[]^4)+(208*G^3*m1*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]])/(15*r12[]^4)+(12*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[-a]*v1i[a]])/(5*r12[]^3)+(24*G^3*m1^2*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]])/(5*r12[]^4)-(208*G^3*m1*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]])/(15*r12[]^4)-(12*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]])/(5*r12[]^3)-(24*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]])/(5*r12[]^3)+(24*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/(5*r12[]^3)+(12*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]])/(5*r12[]^3)-(12*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/(5*r12[]^3)+(8*G^3*m1^2*m2*v1i[i])/(5*r12[]^4)-(32*G^3*m1*m2^2*v1i[i])/(5*r12[]^4)-(4*G^2*m1*m2*Scalar[v1i[-a]*v1i[a]]*v1i[i])/(5*r12[]^3)+(8*G^2*m1*m2*Scalar[v1i[a]*v2i[-a]]*v1i[i])/(5*r12[]^3)-(4*G^2*m1*m2*Scalar[v2i[-a]*v2i[a]]*v1i[i])/(5*r12[]^3)-(8*G^3*m1^2*m2*v2i[i])/(5*r12[]^4)+(32*G^3*m1*m2^2*v2i[i])/(5*r12[]^4)+(4*G^2*m1*m2*Scalar[v1i[-a]*v1i[a]]*v2i[i])/(5*r12[]^3)-(8*G^2*m1*m2*Scalar[v1i[a]*v2i[-a]]*v2i[i])/(5*r12[]^3)+(4*G^2*m1*m2*Scalar[v2i[-a]*v2i[a]]*v2i[i])/(5*r12[]^3))/c^5];(* 2.5PN order *)


A1i[i_,6]=A1i[i,5]+Expand[((-3187*G^4*m1^3*m2*n12i[i])/(1260*r12[]^5) + (34763*G^4*m1^2*m2^2*n12i[i])/(210*r12[]^5) + 
 (10478*G^4*m1*m2^3*n12i[i])/(63*r12[]^5) + (16*G^4*m2^4*n12i[i])/r12[]^5 - 
 (41*G^4*m1^2*m2^2*Pi^2*n12i[i])/(16*r12[]^5) - (41*G^4*m1*m2^3*Pi^2*n12i[i])/(16*r12[]^5) - 
 (44*G^4*m1^2*m2^2*\[Lambda]*n12i[i])/(3*r12[]^5) - (44*G^4*m1*m2^3*\[Lambda]*n12i[i])/(3*r12[]^5) + 
 (44*G^4*m1^3*m2*Log[r12[]/r1p]*n12i[i])/(3*r12[]^5) - (44*G^4*m1*m2^3*Log[r12[]/r2p]*n12i[i])/
  (3*r12[]^5) - (45887*G^3*m1^2*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/(168*r12[]^4) + 
 (415*G^3*m1*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/(8*r12[]^4) - 
 (G^3*m2^3*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/r12[]^4 - 
 (615*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/(64*r12[]^4) + 
 (110*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2)/r12[]^4 - 
 (171*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^4)/(8*r12[]^3) + 
 (48197*G^3*m1^2*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]])/(840*r12[]^4) + 
 (18*G^3*m1*m2^2*n12i[i]*Scalar[v1i[-a]*v1i[a]])/r12[]^4 + 
 (123*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[v1i[-a]*v1i[a]])/(64*r12[]^4) - 
 (22*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[v1i[-a]*v1i[a]])/r12[]^4 + 
 (229*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2*Scalar[v1i[-a]*v1i[a]])/(4*r12[]^3) - 
 (91*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]^2)/(8*r12[]^3) + 
 (24025*G^3*m1^2*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(42*r12[]^4) - 
 (375*G^3*m1*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(4*r12[]^4) + 
 (2*G^3*m2^3*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^4 + 
 (615*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(32*r12[]^4) - 
 (220*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^4 + 
 (171*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^3*Scalar[n12i[a]*v2i[-a]])/(2*r12[]^3) - 
(205*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]])/
  (2*r12[]^3) - (10469*G^3*m1^2*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(42*r12[]^4) + 
 (1113*G^3*m1*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(8*r12[]^4) + 
 (43*G^3*m2^3*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(2*r12[]^4) - 
 (615*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/(64*r12[]^4) + 
 (110*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2)/r12[]^4 - 
 (723*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]^2)/(4*r12[]^3) - 
 (6*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]^2)/r12[]^3 + 
 (191*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^2)/(4*r12[]^3) + 
 (383*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^3)/(2*r12[]^3) + 
 (12*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^3)/r12[]^3 - 
 (455*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^4)/(8*r12[]^3) + 
 (6*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^4)/r12[]^3 - 
 (15*G*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^4)/(8*r12[]^2) + 
 (35*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^6)/(16*r12[]^2) - 
 (36227*G^3*m1^2*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/(420*r12[]^4) + 
 (33*G^3*m1*m2^2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/r12[]^4 + 
 (18*G^3*m2^3*n12i[i]*Scalar[v1i[a]*v2i[-a]])/r12[]^4 - 
 (123*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[v1i[a]*v2i[-a]])/(32*r12[]^4) + 
 (44*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[v1i[a]*v2i[-a]])/r12[]^4 - 
 (229*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2*Scalar[v1i[a]*v2i[-a]])/(2*r12[]^3) + 
 (91*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[v1i[a]*v2i[-a]])/(2*r12[]^3) + 
(244*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/
  r12[]^3 + (4*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*
   Scalar[v1i[a]*v2i[-a]])/r12[]^3 - (225*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*
   Scalar[v1i[a]*v2i[-a]])/(2*r12[]^3) + (12*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*
   Scalar[v1i[a]*v2i[-a]])/r12[]^3 + (15*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^4*
   Scalar[v1i[a]*v2i[-a]])/(2*r12[]^2) - (177*G^2*m1*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]^2)/
  (4*r12[]^3) + (4*G^2*m2^2*n12i[i]*Scalar[v1i[a]*v2i[-a]]^2)/r12[]^3 + 
 (3*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v1i[a]*v2i[-a]]^2)/r12[]^2 + 
 (36227*G^3*m1^2*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/(840*r12[]^4) - 
 (33*G^3*m1*m2^2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/(2*r12[]^4) - 
 (9*G^3*m2^3*n12i[i]*Scalar[v2i[-a]*v2i[a]])/r12[]^4 + 
 (123*G^3*m1*m2^2*Pi^2*n12i[i]*Scalar[v2i[-a]*v2i[a]])/(64*r12[]^4) - 
 (22*G^3*m1^2*m2*Log[r12[]/r1p]*n12i[i]*Scalar[v2i[-a]*v2i[a]])/r12[]^4 + 
 (229*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]^2*Scalar[v2i[-a]*v2i[a]])/(4*r12[]^3) - 
 (91*G^2*m1*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[v2i[-a]*v2i[a]])/(4*r12[]^3) - 
(283*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/
  (2*r12[]^3) - (4*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/r12[]^3 + (259*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*
   Scalar[v2i[-a]*v2i[a]])/(4*r12[]^3) - (12*G^2*m2^2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*
   Scalar[v2i[-a]*v2i[a]])/r12[]^3 + (3*G*m2*n12i[i]*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^2*
   Scalar[v2i[-a]*v2i[a]])/(2*r12[]^2) - (15*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^4*
   Scalar[v2i[-a]*v2i[a]])/(2*r12[]^2) + (43*G^2*m1*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/r12[]^3 - (8*G^2*m2^2*n12i[i]*Scalar[v1i[a]*v2i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/r12[]^3 - (12*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v1i[a]*v2i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/r12[]^2 - (2*G*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]^2*Scalar[v2i[-a]*v2i[a]])/
  r12[]^2 - (81*G^2*m1*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]]^2)/(8*r12[]^3) + 
 (4*G^2*m2^2*n12i[i]*Scalar[v2i[-a]*v2i[a]]^2)/r12[]^3 + 
 (15*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v2i[-a]*v2i[a]]^2)/(2*r12[]^2) + 
 (4*G*m2*n12i[i]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]^2)/r12[]^2 - 
 (2*G*m2*n12i[i]*Scalar[v2i[-a]*v2i[a]]^3)/r12[]^2 + 
 (31397*G^3*m1^2*m2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/(420*r12[]^4) - 
 (307*G^3*m1*m2^2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/(8*r12[]^4) + 
 (4*G^3*m2^3*Scalar[n12i[a]*v1i[-a]]*v1i[i])/r12[]^4 + 
 (123*G^3*m1*m2^2*Pi^2*Scalar[n12i[a]*v1i[-a]]*v1i[i])/(32*r12[]^4) - 
 (44*G^3*m1^2*m2*Log[r12[]/r1p]*Scalar[n12i[a]*v1i[-a]]*v1i[i])/r12[]^4 - 
 (243*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]^3*v1i[i])/(4*r12[]^3) + 
 (207*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[-a]*v1i[a]]*v1i[i])/(8*r12[]^3) - 
 (36227*G^3*m1^2*m2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(420*r12[]^4) + 
 (479*G^3*m1*m2^2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(8*r12[]^4) + 
 (5*G^3*m2^3*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^4 - 
 (123*G^3*m1*m2^2*Pi^2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(32*r12[]^4) + 
 (44*G^3*m1^2*m2*Log[r12[]/r1p]*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^4 + 
 (565*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(4*r12[]^3) - 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^3 - 
 (137*G^2*m1*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(8*r12[]^3) - 
 (269*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v1i[i])/(4*r12[]^3) + 
 (8*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v1i[i])/r12[]^3 - 
 (95*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]^3*v1i[i])/(12*r12[]^3) + 
 (2*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]^3*v1i[i])/r12[]^3 - 
 (3*G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^3*v1i[i])/(2*r12[]^2) + 
 (15*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^4*v1i[i])/(2*r12[]^2) - 
 (45*G*m2*Scalar[n12i[a]*v2i[-a]]^5*v1i[i])/(8*r12[]^2) - 
 (36*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^3 + 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^3 + 
 (27*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/(4*r12[]^3) + 
 (4*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^3 + 
 (6*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^2 - 
 (6*G*m2*Scalar[n12i[a]*v2i[-a]]^3*Scalar[v1i[a]*v2i[-a]]*v1i[i])/r12[]^2 - 
 (2*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]^2*v1i[i])/r12[]^2 + 
 (81*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/(8*r12[]^3) - 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^3 + 
 (83*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/(8*r12[]^3) - 
 (4*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^3 + 
 (G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2 - 
 (12*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2 + 
 (12*G*m2*Scalar[n12i[a]*v2i[-a]]^3*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2 - 
 (4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2 + 
 (8*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v1i[i])/r12[]^2 + 
 (4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]^2*v1i[i])/r12[]^2 - 
 (7*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]^2*v1i[i])/r12[]^2 - 
 (31397*G^3*m1^2*m2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(420*r12[]^4) + 
 (307*G^3*m1*m2^2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(8*r12[]^4) - 
 (4*G^3*m2^3*Scalar[n12i[a]*v1i[-a]]*v2i[i])/r12[]^4 - 
 (123*G^3*m1*m2^2*Pi^2*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(32*r12[]^4) + 
 (44*G^3*m1^2*m2*Log[r12[]/r1p]*Scalar[n12i[a]*v1i[-a]]*v2i[i])/r12[]^4 + 
 (243*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]^3*v2i[i])/(4*r12[]^3) - 
 (207*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[-a]*v1i[a]]*v2i[i])/(8*r12[]^3) + 
 (36227*G^3*m1^2*m2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(420*r12[]^4) - 
 (479*G^3*m1*m2^2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(8*r12[]^4) - 
 (5*G^3*m2^3*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^4 + 
 (123*G^3*m1*m2^2*Pi^2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(32*r12[]^4) - 
 (44*G^3*m1^2*m2*Log[r12[]/r1p]*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^4 - 
 (565*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(4*r12[]^3) + 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]^2*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^3 + 
 (137*G^2*m1*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(8*r12[]^3) + 
 (269*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v2i[i])/(4*r12[]^3) - 
 (8*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v2i[i])/r12[]^3 + 
 (95*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]^3*v2i[i])/(12*r12[]^3) - 
 (2*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]^3*v2i[i])/r12[]^3 + 
 (3*G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]^3*v2i[i])/(2*r12[]^2) - 
 (15*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^4*v2i[i])/(2*r12[]^2) + 
 (45*G*m2*Scalar[n12i[a]*v2i[-a]]^5*v2i[i])/(8*r12[]^2) + 
 (36*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^3 - 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^3 - 
 (27*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/(4*r12[]^3) - 
 (4*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^3 - 
 (6*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^2 + 
 (6*G*m2*Scalar[n12i[a]*v2i[-a]]^3*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^2 + 
 (2*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]^2*v2i[i])/r12[]^2 - 
 (81*G^2*m1*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/(8*r12[]^3) + 
 (2*G^2*m2^2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^3 - 
 (83*G^2*m1*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/(8*r12[]^3) + 
 (4*G^2*m2^2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^3 - 
 (G*m2*Scalar[v1i[-a]*v1i[a]]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2 + 
 (12*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2 - 
 (12*G*m2*Scalar[n12i[a]*v2i[-a]]^3*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2 + 
 (4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2 - 
 (8*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2 - 
 (4*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]]^2*v2i[i])/r12[]^2 + 
 (7*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]]^2*v2i[i])/r12[]^2)/c^6];(* 3PN order *)


A1i[i_,order_]:=a1i[i]/;order>6; (* non-explicit expression for highest orders *)


(* explicit expressions for the PN accelerations of the second point-body from those of the first point-body *)

A2i[i_,order_]:=0/;order<0;
Do[A2i[i_,kc]=ToCanonical[A1i[i,kc]/. ruleexchange12],{kc,0,6}];
A2i[i_,order_]:=a2i[i]/;order>6;


ACMi[i_,order_]:=0/;order<0; (* no contribution for negative PN orders *)


ACMi[i_,0]=-((G*mtot*nCMi[i])/rCM[]^2); (* 0PN order *)


ACMi[i_,1]=ACMi[i,0]+0; (* 0.5PN order *)


ACMi[i_,2]=ACMi[i,1]+Expand[((4*G^2*mtot^2*nCMi[i])/rCM[]^3+(2*G^2*mtot^2*\[Nu]*nCMi[i])/rCM[]^3+(3*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/(2*rCM[]^2)-(G*mtot*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^2-(3*G*mtot*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^2+(4*G*mtot*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^2-(2*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^2)/c^2]; (* 1PN order *)


ACMi[i_,3]=ACMi[i,2]+0; (* 1.5PN order *)


ACMi[i_,4]=ACMi[i,3]+Expand[((-9*G^3*mtot^3*nCMi[i])/rCM[]^4-(87*G^3*mtot^3*\[Nu]*nCMi[i])/(4*rCM[]^4)+(2*G^2*mtot^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^3+(25*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^3+(2*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^3-(15*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4)/(8*rCM[]^2)+(45*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4)/(8*rCM[]^2)+(13*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/(2*rCM[]^3)-(2*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^3+(9*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]])/(2*rCM[]^2)-(6*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^2-(3*G*mtot*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^2)/rCM[]^2+(4*G*mtot*\[Nu]^2*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^2)/rCM[]^2-(2*G^2*mtot^2*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^3-(41*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/(2*rCM[]^3)-(4*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^3-(9*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^3*vCMi[i])/(2*rCM[]^2)-(3*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*vCMi[i])/rCM[]^2+(15*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(2*rCM[]^2)+(2*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2)/c^4]; (* 2PN order *)


ACMi[i_,5]=ACMi[i,4]+Expand[((136*G^3*mtot^3*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]])/(15*rCM[]^4)+(24*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]])/(5*rCM[]^3)-(24*G^3*mtot^3*\[Nu]*vCMi[i])/(5*rCM[]^4)-(8*G^2*mtot^2*\[Nu]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(5*rCM[]^3))/c^5]; (* 2.5PN order *)


ACMi[i_,6]=ACMi[i,5]+Expand[((16*G^4*mtot^4*nCMi[i])/rCM[]^5+(41911*G^4*mtot^4*\[Nu]*nCMi[i])/(420*rCM[]^5)-(41*G^4*mtot^4*Pi^2*\[Nu]*nCMi[i])/(16*rCM[]^5)-(44*G^4*mtot^4*\[Lambda]*\[Nu]*nCMi[i])/(3*rCM[]^5)+(71*G^4*mtot^4*\[Nu]^2*nCMi[i])/(2*rCM[]^5)-(G^3*mtot^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^4-(32573*G^3*mtot^3*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/(168*rCM[]^4)-(615*G^3*mtot^3*Pi^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/(64*rCM[]^4)-(11*G^3*mtot^3*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/(8*rCM[]^4)+(7*G^3*mtot^3*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^4+(110*G^3*mtot^3*\[Nu]*Log[rCM[]/r0]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2)/rCM[]^4-(79*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4)/rCM[]^3+(69*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4)/(2*rCM[]^3)+(30*G^2*mtot^2*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4)/rCM[]^3+(35*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^6)/(16*rCM[]^2)-(175*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^6)/(16*rCM[]^2)+(175*G*mtot*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^6)/(16*rCM[]^2)+(26987*G^3*mtot^3*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/(840*rCM[]^4)+(123*G^3*mtot^3*Pi^2*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/(64*rCM[]^4)-(G^3*mtot^3*\[Nu]^3*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^4-(22*G^3*mtot^3*\[Nu]*Log[rCM[]/r0]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^4+(121*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^3-(16*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^3-(20*G^2*mtot^2*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^3-(15*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4*Scalar[vCMi[-a]*vCMi[a]])/(2*rCM[]^2)+(135*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4*Scalar[vCMi[-a]*vCMi[a]])/(4*rCM[]^2)-(255*G*mtot*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^4*Scalar[vCMi[-a]*vCMi[a]])/(8*rCM[]^2)-(75*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^2)/(4*rCM[]^3)-(8*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^2)/rCM[]^3+(10*G^2*mtot^2*\[Nu]^3*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^2)/rCM[]^3+(15*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]]^2)/(2*rCM[]^2)-(237*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]]^2)/(8*rCM[]^2)+(45*G*mtot*\[Nu]^3*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[vCMi[-a]*vCMi[a]]^2)/(2*rCM[]^2)-(11*G*mtot*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^3)/(4*rCM[]^2)+(49*G*mtot*\[Nu]^2*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^3)/(4*rCM[]^2)-(13*G*mtot*\[Nu]^3*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]^3)/rCM[]^2+(4*G^3*mtot^3*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^4+(18169*G^3*mtot^3*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/(840*rCM[]^4)+(123*G^3*mtot^3*Pi^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/(32*rCM[]^4)-(25*G^3*mtot^3*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^4-(8*G^3*mtot^3*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^4-(44*G^3*mtot^3*\[Nu]*Log[rCM[]/r0]*Scalar[nCMi[a]*vCMi[-a]]*vCMi[i])/rCM[]^4-(329*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^3*vCMi[i])/(6*rCM[]^3)-(59*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*vCMi[i])/(2*rCM[]^3)-(18*G^2*mtot^2*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]^3*vCMi[i])/rCM[]^3+(45*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^5*vCMi[i])/(8*rCM[]^2)-(15*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^5*vCMi[i])/rCM[]^2-(15*G*mtot*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]^5*vCMi[i])/(4*rCM[]^2)+(15*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^3+(27*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^3+(10*G^2*mtot^2*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^3-(12*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^3*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2+(111*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(4*rCM[]^2)+(12*G*mtot*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]^3*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2+(65*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]^2*vCMi[i])/(8*rCM[]^2)-(19*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]^2*vCMi[i])/rCM[]^2-(6*G*mtot*\[Nu]^3*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]^2*vCMi[i])/rCM[]^2)/c^6]; (* 3PN order *)


ACMi[i_,order_]:=aCMi[i]/;order>6; (* non-explicit expression for highest orders *)


A1si[i_,order_]:=0/;order<0; (* no contribution for negative PN orders *)


Do[A1si[i_,kc]=A1i[i,kc],{kc,0,2}]; (* 0PN to 1PN order *)


IndexSet[A1si[i_,3],A1i[i,3]+Expand[((3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]])/r12[]^3-(3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]])/r12[]^3+(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v1i[b])/(m1*r12[]^3)+(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*v1i[b])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v1i[j])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v1i[j])/r12[]^3-(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v2i[b])/(m1*r12[]^3)-(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*v2i[b])/r12[]^3+(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v2i[j])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v2i[j])/r12[]^3)/c^3]]; (* 1.5PN order *)


IndexSet[A1si[i_,4],ScreenDollarIndices[A1si[i,3]+(A1i[i,4]-A1i[i,3])]]; (* 2PN order *)


IndexSet[A1si[i_,5],ScreenDollarIndices[A1si[i,4]+(A1i[i,5]-A1i[i,4])+Expand[((-14*G^2*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]])/r12[]^4-(9*G^2*m2^2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]])/(m1*r12[]^4)-(35*G^2*m1*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]])/(2*r12[]^4)-(16*G^2*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]])/r12[]^4+(14*G^2*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]])/r12[]^4+(9*G^2*m2^2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]])/(m1*r12[]^4)+(39*G^2*m1*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]])/(2*r12[]^4)+(16*G^2*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]])/r12[]^4-(15*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/(2*m1*r12[]^3)-(15*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/r12[]^3+(15*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]]^3)/(2*m1*r12[]^3)+(15*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]]^3)/r12[]^3-(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]])/r12[]^3+(3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/(m1*r12[]^3)+(12*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/r12[]^3+(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^3-(3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/(m1*r12[]^3)-(12*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^3-(14*G^2*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v1i[b])/r12[]^4-(9*G^2*m2^2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v1i[b])/(m1*r12[]^4)-(23*G^2*m1*epsilonMetricdelta[i,-a,-b]*S2i[a]*v1i[b])/(2*r12[]^4)-(12*G^2*m2*epsilonMetricdelta[i,-a,-b]*S2i[a]*v1i[b])/r12[]^4-(4*G^2*m1*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[n12i[a]*S2i[-a]]*v1i[b])/r12[]^4-(3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[n12i[a]*v1i[-a]]*Scalar[S1i[a]*v1i[-a]]*v1i[b])/(m1*r12[]^3)+(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v1i[b])/(m1*r12[]^3)+(3*G*m2*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[S1i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v1i[b])/(m1*r12[]^3)-(15*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[b])/(2*m1*r12[]^3)-(6*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[b])/r12[]^3-(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[v1i[a]*v2i[-a]]*v1i[b])/(m1*r12[]^3)-(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[v1i[a]*v2i[-a]]*v1i[b])/r12[]^3+(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[v2i[-a]*v2i[a]]*v1i[b])/(m1*r12[]^3)+(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[v2i[-a]*v2i[a]]*v1i[b])/r12[]^3+(26*G^2*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v1i[j])/r12[]^4+(18*G^2*m2^2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v1i[j])/(m1*r12[]^4)+(49*G^2*m1*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v1i[j])/(2*r12[]^4)+(20*G^2*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v1i[j])/r12[]^4+(15*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[n12i[a]*v2i[-a]]^2*v1i[j])/(m1*r12[]^3)+(15*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[n12i[a]*v2i[-a]]^2*v1i[j])/r12[]^3+(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[v1i[a]*v2i[-a]]*v1i[j])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[v1i[a]*v2i[-a]]*v1i[j])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[v2i[-a]*v2i[a]]*v1i[j])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[v2i[-a]*v2i[a]]*v1i[j])/r12[]^3+(3*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[i]*v1i[j])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[i]*v1i[j])/r12[]^3+(3*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S1i[b]*Scalar[n12i[a]*v2i[-a]]*v1i[i]*v1i[j])/(m1*r12[]^3)+(14*G^2*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v2i[b])/r12[]^4+(9*G^2*m2^2*epsilonMetricdelta[i,-a,-b]*S1i[a]*v2i[b])/(m1*r12[]^4)+(23*G^2*m1*epsilonMetricdelta[i,-a,-b]*S2i[a]*v2i[b])/(2*r12[]^4)+(12*G^2*m2*epsilonMetricdelta[i,-a,-b]*S2i[a]*v2i[b])/r12[]^4+(4*G^2*m1*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[n12i[a]*S2i[-a]]*v2i[b])/r12[]^4-(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v2i[b])/(m1*r12[]^3)+(15*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[b])/(2*m1*r12[]^3)+(6*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[b])/r12[]^3-(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[n12i[a]*v1i[-a]]*Scalar[S2i[a]*v2i[-a]]*v2i[b])/r12[]^3+(6*G*epsilonMetricdelta[i,-a,-b]*n12i[a]*Scalar[n12i[a]*v2i[-a]]*Scalar[S2i[a]*v2i[-a]]*v2i[b])/r12[]^3+(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[v1i[a]*v2i[-a]]*v2i[b])/(m1*r12[]^3)+(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[v1i[a]*v2i[-a]]*v2i[b])/r12[]^3-(3*G*m2*epsilonMetricdelta[i,-a,-b]*S1i[a]*Scalar[v2i[-a]*v2i[a]]*v2i[b])/(m1*r12[]^3)-(4*G*epsilonMetricdelta[i,-a,-b]*S2i[a]*Scalar[v2i[-a]*v2i[a]]*v2i[b])/r12[]^3+(3*G*m2*epsilonMetricdelta[i,-a,-b]*Scalar[S1i[a]*v1i[-a]]*v1i[a]*v2i[b])/(m1*r12[]^3)+(4*G*epsilonMetricdelta[i,-a,-b]*Scalar[S2i[a]*v2i[-a]]*v1i[a]*v2i[b])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[j]*v2i[i])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[j]*v2i[i])/r12[]^3-(26*G^2*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v2i[j])/r12[]^4-(18*G^2*m2^2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*v2i[j])/(m1*r12[]^4)-(49*G^2*m1*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v2i[j])/(2*r12[]^4)-(20*G^2*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*v2i[j])/r12[]^4-(15*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[n12i[a]*v2i[-a]]^2*v2i[j])/(m1*r12[]^3)-(15*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[n12i[a]*v2i[-a]]^2*v2i[j])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[v1i[a]*v2i[-a]]*v2i[j])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[v1i[a]*v2i[-a]]*v2i[j])/r12[]^3+(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S1i[b]*Scalar[v2i[-a]*v2i[a]]*v2i[j])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*S2i[b]*Scalar[v2i[-a]*v2i[a]]*v2i[j])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*Scalar[S1i[a]*v1i[-a]]*v1i[b]*v2i[j])/(m1*r12[]^3)-(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*n12i[i]*Scalar[S2i[a]*v2i[-a]]*v1i[b]*v2i[j])/r12[]^3-(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[i]*v2i[j])/(m1*r12[]^3)-(12*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*v1i[i]*v2i[j])/r12[]^3+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S2i[b]*Scalar[n12i[a]*v2i[-a]]*v1i[i]*v2i[j])/r12[]^3-(3*G*m2*epsilonMetricdelta[-a,-b,-j]*S1i[a]*v1i[b]*v1i[i]*v2i[j])/(m1*r12[]^3)-(4*G*epsilonMetricdelta[-a,-b,-j]*S2i[a]*v1i[b]*v1i[i]*v2i[j])/r12[]^3+(6*G*m2*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S1i[b]*Scalar[n12i[a]*v1i[-a]]*v2i[i]*v2i[j])/(m1*r12[]^3)+(6*G*epsilonMetricdelta[-a,-b,-j]*n12i[a]*S2i[b]*Scalar[n12i[a]*v1i[-a]]*v2i[i]*v2i[j])/r12[]^3)/c^5]]]; (* 2.5PN order *)


A1si[i_,order_]:=a1i[i]/;order>5;(* non-explicit expression for highest orders *)


(* explicit expressions for the PN accelerations of the second spinning point-body from those of the first spinning point-body *)

A2si[i_,order_]:=0/;order<0;
Do[IndexSet[A2si[i_,kc],ScreenDollarIndices@ToCanonical[A1si[i,kc]/. ruleexchange12]],{kc,0,5}];
A2si[i_,order_]:=a2i[i]/;order>5;


A1Si[i_,order_]:=0/;order<0; (* no contribution for negative PN orders *)


Do[A1Si[i_,kc]=A1i[i,kc],{kc,0,2}]; (* 0PN to 1PN order *)


IndexSet[A1Si[i_,3],A1i[i,3]+Expand[(3*G*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]])/(c^3*m1*r12[]^3)+(6*G*n12i[a]*S2ij[i,-a]*Scalar[n12i[a]*v1i[-a]])/(c^3*r12[]^3)-(3*G*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]])/(c^3*m1*r12[]^3)-(6*G*n12i[a]*S2ij[i,-a]*Scalar[n12i[a]*v2i[-a]])/(c^3*r12[]^3)-(6*G*n12i[i]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]])/(c^3*r12[]^3)-(3*G*m2*S1ij[i,-a]*v1i[a])/(c^3*m1*r12[]^3)-(4*G*S2ij[i,-a]*v1i[a])/(c^3*r12[]^3)+(6*G*m2*n12i[a]*n12i[i]*S1ij[-a,-b]*v1i[b])/(c^3*m1*r12[]^3)+(6*G*n12i[a]*n12i[i]*S2ij[-a,-b]*v1i[b])/(c^3*r12[]^3)+(3*G*m2*S1ij[i,-a]*v2i[a])/(c^3*m1*r12[]^3)+(4*G*S2ij[i,-a]*v2i[a])/(c^3*r12[]^3)-(6*G*m2*n12i[a]*n12i[i]*S1ij[-a,-b]*v2i[b])/(c^3*m1*r12[]^3)]]; (* 1.5PN order *)


IndexSet[A1Si[i_,4],ScreenDollarIndices[A1Si[i,3]+(A1i[i,4]-A1i[i,3])+Expand[(3*G*n12i[a]*S1ij[i,b]*S2ij[-a,-b])/(c^4*m1*r12[]^4)+(3*G*n12i[a]*S1ij[-a,b]*S2ij[i,-b])/(c^4*m1*r12[]^4)+(3*G*n12i[i]*Scalar[S1ij[a,b]*S2ij[-a,-b]])/(c^4*m1*r12[]^4)-(15*G*n12i[i]*Scalar[n12i[a]*n12i[b]*S1ij[-a,i]*S2ij[-b,-i]])/(c^4*m1*r12[]^4)+(3*G*m2*\[Kappa]1*n12i[a]*S1ij[-a,-b]*S1ij[i,b])/(c^4*m1^2*r12[]^4)+(3*G*\[Kappa]2*n12i[a]*S2ij[-a,-b]*S2ij[i,b])/(c^4*m2*r12[]^4)+(3*G*m2*\[Kappa]1*n12i[i]*Scalar[S1ij[-a,-b]*S1ij[a,b]])/(2*c^4*m1^2*r12[]^4)-(15*G*m2*\[Kappa]1*n12i[i]*Scalar[n12i[a]*n12i[b]*S1ij[-a,i]*S1ij[-b,-i]])/(2*c^4*m1^2*r12[]^4)+(3*G*\[Kappa]2*n12i[i]*Scalar[S2ij[-a,-b]*S2ij[a,b]])/(2*c^4*m2*r12[]^4)-(15*G*\[Kappa]2*n12i[i]*Scalar[n12i[a]*n12i[b]*S2ij[-a,i]*S2ij[-b,-i]])/(2*c^4*m2*r12[]^4)]]](* 2PN order *)


IndexSet[A1Si[i_,5],ScreenDollarIndices[A1Si[i,4]+(A1i[i,5]-A1i[i,4])+Expand[(-14*G^2*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]])/(c^5*r12[]^4) - 
 (6*G^2*m2^2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]])/(c^5*m1*r12[]^4) - 
 (31*G^2*m1*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v1i[-a]])/(2*c^5*r12[]^4) - 
 (16*G^2*m2*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v1i[-a]])/(c^5*r12[]^4) - 
 (3*G*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[-a]*v1i[a]])/
  (2*c^5*m1*r12[]^3) + (14*G^2*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]])/
  (c^5*r12[]^4) + (6*G^2*m2^2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]])/
  (c^5*m1*r12[]^4) + (35*G^2*m1*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]])/
  (2*c^5*r12[]^4) + (16*G^2*m2*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]])/
  (c^5*r12[]^4) + (3*G*m2*n12i[a]*S1ij[i, -a]*Scalar[v1i[-a]*v1i[a]]*
   Scalar[n12i[a]*v2i[-a]])/(2*c^5*m1*r12[]^3) - 
 (15*G*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/
  (2*c^5*m1*r12[]^3) - (15*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*
   Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3) + 
 (15*G*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^3)/(2*c^5*m1*r12[]^3) + 
 (15*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^3)/(c^5*r12[]^3) - 
 (6*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]])/
  (c^5*r12[]^3) + (3*G*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]]*
   Scalar[v1i[a]*v2i[-a]])/(c^5*m1*r12[]^3) + 
 (12*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/
  (c^5*r12[]^3) + (3*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3) - 
 (3*G*m2*n12i[a]*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/
  (c^5*m1*r12[]^3) - (9*G*n12i[a]*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]]*
   Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3) + (14*G^2*m2*S1ij[i, -a]*v1i[a])/
  (c^5*r12[]^4) + (6*G^2*m2^2*S1ij[i, -a]*v1i[a])/(c^5*m1*r12[]^4) + 
 (23*G^2*m1*S2ij[i, -a]*v1i[a])/(2*c^5*r12[]^4) + 
 (12*G^2*m2*S2ij[i, -a]*v1i[a])/(c^5*r12[]^4) + 
 (3*G*m2*S1ij[i, -a]*Scalar[v1i[-a]*v1i[a]]*v1i[a])/(2*c^5*m1*r12[]^3) - 
 (3*G*m2*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v1i[a])/
  (c^5*m1*r12[]^3) + (15*G*m2*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[a])/
  (2*c^5*m1*r12[]^3) + (6*G*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[a])/
  (c^5*r12[]^3) + (3*G*m2*S1ij[i, -a]*Scalar[v1i[a]*v2i[-a]]*v1i[a])/
  (c^5*m1*r12[]^3) + (4*G*S2ij[i, -a]*Scalar[v1i[a]*v2i[-a]]*v1i[a])/
  (c^5*r12[]^3) - (3*G*m2*S1ij[i, -a]*Scalar[v2i[-a]*v2i[a]]*v1i[a])/
  (c^5*m1*r12[]^3) - (2*G*S2ij[i, -a]*Scalar[v2i[-a]*v2i[a]]*v1i[a])/
  (c^5*r12[]^3) - (26*G^2*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*v1i[b])/(c^5*r12[]^4) - 
 (12*G^2*m2^2*n12i[a]*n12i[i]*S1ij[-a, -b]*v1i[b])/(c^5*m1*r12[]^4) - 
 (45*G^2*m1*n12i[a]*n12i[i]*S2ij[-a, -b]*v1i[b])/(2*c^5*r12[]^4) - 
 (20*G^2*m2*n12i[a]*n12i[i]*S2ij[-a, -b]*v1i[b])/(c^5*r12[]^4) - 
 (3*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v1i[-a]*v1i[a]]*v1i[b])/
  (c^5*m1*r12[]^3) - (15*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*
   Scalar[n12i[a]*v2i[-a]]^2*v1i[b])/(c^5*m1*r12[]^3) - 
 (15*G*n12i[a]*n12i[i]*S2ij[-a, -b]*Scalar[n12i[a]*v2i[-a]]^2*v1i[b])/
  (c^5*r12[]^3) - (6*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v1i[a]*v2i[-a]]*
   v1i[b])/(c^5*m1*r12[]^3) - (6*G*n12i[a]*n12i[i]*S2ij[-a, -b]*
   Scalar[v1i[a]*v2i[-a]]*v1i[b])/(c^5*r12[]^3) + 
 (6*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v2i[-a]*v2i[a]]*v1i[b])/
  (c^5*m1*r12[]^3) + (3*G*n12i[a]*n12i[i]*S2ij[-a, -b]*Scalar[v2i[-a]*v2i[a]]*
   v1i[b])/(c^5*r12[]^3) - (3*G*m2*n12i[a]*S1ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*
   v1i[b]*v1i[i])/(c^5*m1*r12[]^3) - 
 (6*G*n12i[a]*S2ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*v1i[b]*v1i[i])/(c^5*r12[]^3) - 
 (3*G*m2*n12i[a]*S1ij[-a, -b]*Scalar[n12i[a]*v2i[-a]]*v1i[b]*v1i[i])/
  (c^5*m1*r12[]^3) - (14*G^2*m2*S1ij[i, -a]*v2i[a])/(c^5*r12[]^4) - 
 (6*G^2*m2^2*S1ij[i, -a]*v2i[a])/(c^5*m1*r12[]^4) - 
 (23*G^2*m1*S2ij[i, -a]*v2i[a])/(2*c^5*r12[]^4) - 
 (12*G^2*m2*S2ij[i, -a]*v2i[a])/(c^5*r12[]^4) - 
 (3*G*m2*S1ij[i, -a]*Scalar[v1i[-a]*v1i[a]]*v2i[a])/(2*c^5*m1*r12[]^3) + 
 (3*G*m2*S1ij[i, -a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v2i[a])/
  (c^5*m1*r12[]^3) - (15*G*m2*S1ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[a])/
  (2*c^5*m1*r12[]^3) - (6*G*S2ij[i, -a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[a])/
  (c^5*r12[]^3) - (3*G*m2*S1ij[i, -a]*Scalar[v1i[a]*v2i[-a]]*v2i[a])/
  (c^5*m1*r12[]^3) - (4*G*S2ij[i, -a]*Scalar[v1i[a]*v2i[-a]]*v2i[a])/
  (c^5*r12[]^3) + (3*G*m2*S1ij[i, -a]*Scalar[v2i[-a]*v2i[a]]*v2i[a])/
  (c^5*m1*r12[]^3) + (2*G*S2ij[i, -a]*Scalar[v2i[-a]*v2i[a]]*v2i[a])/
  (c^5*r12[]^3) + (26*G^2*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*v2i[b])/(c^5*r12[]^4) + 
 (12*G^2*m2^2*n12i[a]*n12i[i]*S1ij[-a, -b]*v2i[b])/(c^5*m1*r12[]^4) + 
 (45*G^2*m1*n12i[a]*n12i[i]*S2ij[-a, -b]*v2i[b])/(2*c^5*r12[]^4) + 
 (20*G^2*m2*n12i[a]*n12i[i]*S2ij[-a, -b]*v2i[b])/(c^5*r12[]^4) + 
 (3*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v1i[-a]*v1i[a]]*v2i[b])/
  (c^5*m1*r12[]^3) + (15*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*
   Scalar[n12i[a]*v2i[-a]]^2*v2i[b])/(c^5*m1*r12[]^3) + 
 (15*G*n12i[a]*n12i[i]*S2ij[-a, -b]*Scalar[n12i[a]*v2i[-a]]^2*v2i[b])/
  (c^5*r12[]^3) + (6*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v1i[a]*v2i[-a]]*
   v2i[b])/(c^5*m1*r12[]^3) + (6*G*n12i[a]*n12i[i]*S2ij[-a, -b]*
   Scalar[v1i[a]*v2i[-a]]*v2i[b])/(c^5*r12[]^3) - 
 (6*G*m2*n12i[a]*n12i[i]*S1ij[-a, -b]*Scalar[v2i[-a]*v2i[a]]*v2i[b])/
  (c^5*m1*r12[]^3) - (3*G*n12i[a]*n12i[i]*S2ij[-a, -b]*Scalar[v2i[-a]*v2i[a]]*
   v2i[b])/(c^5*r12[]^3) + (6*G*m2*n12i[a]*S1ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*
   v1i[i]*v2i[b])/(c^5*m1*r12[]^3) + 
 (12*G*n12i[a]*S2ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*v1i[i]*v2i[b])/
  (c^5*r12[]^3) - (6*G*n12i[a]*S2ij[-a, -b]*Scalar[n12i[a]*v2i[-a]]*v1i[i]*
   v2i[b])/(c^5*r12[]^3) - (3*G*m2*S1ij[-a, -b]*v1i[a]*v1i[i]*v2i[b])/
  (c^5*m1*r12[]^3) - (4*G*S2ij[-a, -b]*v1i[a]*v1i[i]*v2i[b])/(c^5*r12[]^3) + 
 (6*G*m2*n12i[a]*S1ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*v1i[b]*v2i[i])/
  (c^5*m1*r12[]^3) + (6*G*n12i[a]*S2ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*v1i[b]*
   v2i[i])/(c^5*r12[]^3) - (6*G*m2*n12i[a]*S1ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*
   v2i[b]*v2i[i])/(c^5*m1*r12[]^3) - 
 (6*G*n12i[a]*S2ij[-a, -b]*Scalar[n12i[a]*v1i[-a]]*v2i[b]*v2i[i])/(c^5*r12[]^3)]]];(*2.5PN order*)


A1Si[i_,order_]:=a1i[i]/;order>5;(* non-explicit expression for highest orders *)


(* explicit expressions for the PN accelerations of the second spinning point-body from those of the first spinning point-body *)

A2Si[i_,order_]:=0/;order<0;
Do[IndexSet[A2Si[i_,kc],ScreenDollarIndices@ToCanonical[A1Si[i,kc]/. ruleexchange12]],{kc,0,5}];
A2Si[i_,order_]:=a2i[i]/;order>5;


AsCMi[i_,order_]:=0/;order<0; (* no contribution for negative PN orders *)


Do[AsCMi[i_,kc]=ACMi[i,kc],{kc,0,2}]; (* 0PN to 1PN order *)


IndexSet[AsCMi[i_,3],ACMi[i,3]+Expand[((-12*G*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]])/rCM[]^3-(6*G*\[Delta]*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]])/rCM[]^3+(9*G*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Si[b])/rCM[]^3+(3*G*\[Delta]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[b])/rCM[]^3+(7*G*epsilonMetricdelta[i,-a,-b]*Si[a]*vCMi[b])/rCM[]^3+(3*G*\[Delta]*epsilonMetricdelta[i,-a,-b]*Sigmai[a]*vCMi[b])/rCM[]^3)/c^3]]; (* 1.5PN order *)


IndexSet[AsCMi[i_,4],ScreenDollarIndices[AsCMi[i,3]+(ACMi[i,4]-ACMi[i,3])]]; (* 2PN order *)


IndexSet[AsCMi[i_,5],ScreenDollarIndices[AsCMi[i,4]+(ACMi[i,5]-ACMi[i,4])+Expand[((38*G^2*mtot*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]])/rCM[]^4+(25*G^2*mtot*\[Nu]*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]])/rCM[]^4+(30*G*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]])/rCM[]^3-(24*G*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]])/rCM[]^3+(18*G^2*mtot*\[Delta]*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]])/rCM[]^4+(29*G^2*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]])/(2*rCM[]^4)+(15*G*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]])/rCM[]^3-(12*G*\[Delta]*\[Nu]*nCMi[i]*Scalar[vCMi[-a]*vCMi[a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]])/rCM[]^3-(25*G^2*mtot*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Si[b])/rCM[]^4-(15*G^2*mtot*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Si[b])/rCM[]^4-(45*G*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]^3*Si[b])/(2*rCM[]^3)+(21*G*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Si[b])/rCM[]^3-(9*G^2*mtot*\[Delta]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[b])/rCM[]^4-(17*G^2*mtot*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[b])/(2*rCM[]^4)-(15*G*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]^3*Sigmai[b])/rCM[]^3+(12*G*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Sigmai[b])/rCM[]^3-(8*G^2*mtot*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*Si[-a]]*vCMi[b])/rCM[]^4-(4*G^2*mtot*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[b])/rCM[]^4-(3*G*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Si[a]*vCMi[-a]]*vCMi[b])/rCM[]^3+(3*G*\[Nu]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Si[a]*vCMi[-a]]*vCMi[b])/rCM[]^3-(3*G*\[Delta]*epsilonMetricdelta[i,-a,-b]*nCMi[a]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Sigmai[a]*vCMi[-a]]*vCMi[b])/rCM[]^3-(21*G^2*mtot*epsilonMetricdelta[i,-a,-b]*Si[a]*vCMi[b])/rCM[]^4-(9*G^2*mtot*\[Nu]*epsilonMetricdelta[i,-a,-b]*Si[a]*vCMi[b])/rCM[]^4-(33*G*\[Nu]*epsilonMetricdelta[i,-a,-b]*Scalar[nCMi[a]*vCMi[-a]]^2*Si[a]*vCMi[b])/(2*rCM[]^3)+(14*G*\[Nu]*epsilonMetricdelta[i,-a,-b]*Scalar[vCMi[-a]*vCMi[a]]*Si[a]*vCMi[b])/rCM[]^3-(9*G^2*mtot*\[Delta]*epsilonMetricdelta[i,-a,-b]*Sigmai[a]*vCMi[b])/rCM[]^4-(9*G^2*mtot*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*Sigmai[a]*vCMi[b])/(2*rCM[]^4)-(9*G*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*Scalar[nCMi[a]*vCMi[-a]]^2*Sigmai[a]*vCMi[b])/rCM[]^3+(7*G*\[Delta]*\[Nu]*epsilonMetricdelta[i,-a,-b]*Scalar[vCMi[-a]*vCMi[a]]*Sigmai[a]*vCMi[b])/rCM[]^3+(9*G*Scalar[nCMi[a]*vCMi[-a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]]*vCMi[i])/rCM[]^3-(9*G*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Si[b]*vCMi[i]]*vCMi[i])/rCM[]^3+(3*G*\[Delta]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]]*vCMi[i])/rCM[]^3-(6*G*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[epsilonMetricdelta[-a,-b,-i]*nCMi[a]*Sigmai[b]*vCMi[i]]*vCMi[i])/rCM[]^3)/c^5]]]; (* 2.5PN order *)


AsCMi[i_,order_]:=aCMi[i]/;order>5;(* non-explicit expression for highest orders *)


s1dij[i_,j_,order_]:=0/;order<2;(* no contribution below 1PN order *)


IndexSet[s1dij[i_,j_,2],Expand[(2*G*m2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]])/(c^2*r12[]^2)-(2*G*m2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]])/(c^2*r12[]^2)-(2*G*m2*n12i[j]*S1ij[i,-a]*v1i[a])/(c^2*r12[]^2)+(2*G*m2*n12i[i]*S1ij[j,-a]*v1i[a])/(c^2*r12[]^2)-(G*m2*n12i[a]*S1ij[j,-a]*v1i[i])/(c^2*r12[]^2)+(G*m2*n12i[a]*S1ij[i,-a]*v1i[j])/(c^2*r12[]^2)+(2*G*m2*n12i[j]*S1ij[i,-a]*v2i[a])/(c^2*r12[]^2)-(2*G*m2*n12i[i]*S1ij[j,-a]*v2i[a])/(c^2*r12[]^2)+(2*G*m2*n12i[a]*S1ij[j,-a]*v2i[i])/(c^2*r12[]^2)-(2*G*m2*n12i[a]*S1ij[i,-a]*v2i[j])/(c^2*r12[]^2)]]; (* 1PN order *)


IndexSet[s1dij[i_,j_,3],ScreenDollarIndices[s1dij[i,j,2]+Expand[(3*G*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b])/(c^3*r12[]^3)-(3*G*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b])/(c^3*r12[]^3)+(2*G*S1ij[j,a]*S2ij[i,-a])/(c^3*r12[]^3)-(3*G*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b])/(c^3*r12[]^3)-(2*G*S1ij[i,a]*S2ij[j,-a])/(c^3*r12[]^3)+(3*G*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b])/(c^3*r12[]^3)+(3*G*m2*\[Kappa]1*n12i[a]*n12i[j]*S1ij[-a,-b]*S1ij[i,b])/(c^3*m1*r12[]^3)-(3*G*m2*\[Kappa]1*n12i[a]*n12i[i]*S1ij[-a,-b]*S1ij[j,b])/(c^3*m1*r12[]^3)]]]; (* 1.5PN order *)


IndexSet[s1dij[i_,j_,4],ScreenDollarIndices[s1dij[i,j,3]+Expand[(-16*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)+(2*G^2*m2^2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)+(2*G^2*m1*m2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)-(2*G^2*m2^2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)+(16*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)-(2*G^2*m2^2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]])/(c^4*r12[]^3)+(16*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]])/(c^4*r12[]^3)-(2*G^2*m2^2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]])/(c^4*r12[]^3)+(2*G^2*m2^2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]])/(c^4*r12[]^3)-(16*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]])/(c^4*r12[]^3)+(2*G^2*m2^2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]])/(c^4*r12[]^3)-(3*G*m2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/(c^4*r12[]^2)+(3*G*m2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]]^3)/(c^4*r12[]^2)+(2*G*m2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/(c^4*r12[]^2)-(2*G*m2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/(c^4*r12[]^2)+(7*G^2*m1*m2*n12i[j]*S1ij[i,-a]*v1i[a])/(c^4*r12[]^3)-(7*G^2*m1*m2*n12i[i]*S1ij[j,-a]*v1i[a])/(c^4*r12[]^3)+(3*G*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[a])/(c^4*r12[]^2)-(3*G*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[a])/(c^4*r12[]^2)+(2*G*m2*n12i[j]*S1ij[i,-a]*Scalar[v1i[a]*v2i[-a]]*v1i[a])/(c^4*r12[]^2)-(2*G*m2*n12i[i]*S1ij[j,-a]*Scalar[v1i[a]*v2i[-a]]*v1i[a])/(c^4*r12[]^2)-(2*G*m2*n12i[j]*S1ij[i,-a]*Scalar[v2i[-a]*v2i[a]]*v1i[a])/(c^4*r12[]^2)+(2*G*m2*n12i[i]*S1ij[j,-a]*Scalar[v2i[-a]*v2i[a]]*v1i[a])/(c^4*r12[]^2)-(6*G^2*m1*m2*n12i[a]*S1ij[j,-a]*v1i[i])/(c^4*r12[]^3)+(G^2*m2^2*n12i[a]*S1ij[j,-a]*v1i[i])/(c^4*r12[]^3)+(3*G*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[i])/(2*c^4*r12[]^2)+(G*m2*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a]*v1i[i])/(c^4*r12[]^2)+(6*G^2*m1*m2*n12i[a]*S1ij[i,-a]*v1i[j])/(c^4*r12[]^3)-(G^2*m2^2*n12i[a]*S1ij[i,-a]*v1i[j])/(c^4*r12[]^3)-(3*G*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2*v1i[j])/(2*c^4*r12[]^2)-(G*m2*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a]*v1i[j])/(c^4*r12[]^2)-(7*G^2*m1*m2*n12i[j]*S1ij[i,-a]*v2i[a])/(c^4*r12[]^3)+(7*G^2*m1*m2*n12i[i]*S1ij[j,-a]*v2i[a])/(c^4*r12[]^3)-(3*G*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[a])/(c^4*r12[]^2)+(3*G*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[a])/(c^4*r12[]^2)-(2*G*m2*n12i[j]*S1ij[i,-a]*Scalar[v1i[a]*v2i[-a]]*v2i[a])/(c^4*r12[]^2)+(2*G*m2*n12i[i]*S1ij[j,-a]*Scalar[v1i[a]*v2i[-a]]*v2i[a])/(c^4*r12[]^2)+(2*G*m2*n12i[j]*S1ij[i,-a]*Scalar[v2i[-a]*v2i[a]]*v2i[a])/(c^4*r12[]^2)-(2*G*m2*n12i[i]*S1ij[j,-a]*Scalar[v2i[-a]*v2i[a]]*v2i[a])/(c^4*r12[]^2)-(G*m2*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[i]*v2i[a])/(c^4*r12[]^2)+(G*m2*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[j]*v2i[a])/(c^4*r12[]^2)+(5*G^2*m1*m2*n12i[a]*S1ij[j,-a]*v2i[i])/(c^4*r12[]^3)-(G^2*m2^2*n12i[a]*S1ij[j,-a]*v2i[i])/(c^4*r12[]^3)-(3*G*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[i])/(c^4*r12[]^2)-(2*G*m2*n12i[a]*S1ij[j,-a]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/(c^4*r12[]^2)+(2*G*m2*n12i[a]*S1ij[j,-a]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/(c^4*r12[]^2)+(2*G*m2*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[a]*v2i[i])/(c^4*r12[]^2)-(2*G*m2*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a]*v2i[i])/(c^4*r12[]^2)-(2*G*m2*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[a]*v2i[i])/(c^4*r12[]^2)+(2*G*m2*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[a]*v2i[i])/(c^4*r12[]^2)-(5*G^2*m1*m2*n12i[a]*S1ij[i,-a]*v2i[j])/(c^4*r12[]^3)+(G^2*m2^2*n12i[a]*S1ij[i,-a]*v2i[j])/(c^4*r12[]^3)+(3*G*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2*v2i[j])/(c^4*r12[]^2)+(2*G*m2*n12i[a]*S1ij[i,-a]*Scalar[v1i[a]*v2i[-a]]*v2i[j])/(c^4*r12[]^2)-(2*G*m2*n12i[a]*S1ij[i,-a]*Scalar[v2i[-a]*v2i[a]]*v2i[j])/(c^4*r12[]^2)-(2*G*m2*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[a]*v2i[j])/(c^4*r12[]^2)+(2*G*m2*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a]*v2i[j])/(c^4*r12[]^2)+(2*G*m2*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[a]*v2i[j])/(c^4*r12[]^2)-(2*G*m2*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[a]*v2i[j])/(c^4*r12[]^2)]]];(* 2PN order *)


IndexSet[s1dij[i_,j_,5],ScreenDollarIndices[s1dij[i,j,4]+Expand[(2*G^3*m1^2*m2*n12i[a]*n12i[j]*S1ij[i,-a])/(c^5*r12[]^4)+(2*G^3*m1*m2^2*n12i[a]*n12i[j]*S1ij[i,-a])/(c^5*r12[]^4)-(4*G^3*m1^2*m2*S1ij[i,j])/(3*c^5*r12[]^4)-(4*G^3*m1*m2^2*S1ij[i,j])/(3*c^5*r12[]^4)-(2*G^3*m1^2*m2*n12i[a]*n12i[i]*S1ij[j,-a])/(c^5*r12[]^4)-(2*G^3*m1*m2^2*n12i[a]*n12i[i]*S1ij[j,-a])/(c^5*r12[]^4)-(11*G^2*m1*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b])/(2*c^5*r12[]^4)-(8*G^2*m2*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b])/(c^5*r12[]^4)+(11*G^2*m1*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b])/(2*c^5*r12[]^4)+(8*G^2*m2*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b])/(c^5*r12[]^4)-(3*G^2*m1*S1ij[j,a]*S2ij[i,-a])/(c^5*r12[]^4)-(6*G^2*m2*S1ij[j,a]*S2ij[i,-a])/(c^5*r12[]^4)+(7*G^2*m1*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b])/(2*c^5*r12[]^4)+(8*G^2*m2*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b])/(c^5*r12[]^4)+(3*G^2*m1*S1ij[i,a]*S2ij[j,-a])/(c^5*r12[]^4)+(6*G^2*m2*S1ij[i,a]*S2ij[j,-a])/(c^5*r12[]^4)-(7*G^2*m1*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b])/(2*c^5*r12[]^4)-(8*G^2*m2*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b])/(c^5*r12[]^4)-(30*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]^2)/(c^5*r12[]^3)-(4*G^2*m1*m2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]]^2)/(c^5*r12[]^3)+(30*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]^2)/(c^5*r12[]^3)+(6*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[v1i[-a]*v1i[a]])/(c^5*r12[]^3)+(4*G^2*m1*m2*S1ij[i,j]*Scalar[v1i[-a]*v1i[a]])/(3*c^5*r12[]^3)-(6*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[v1i[-a]*v1i[a]])/(c^5*r12[]^3)+(60*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(c^5*r12[]^3)+(8*G^2*m1*m2*S1ij[i,j]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(c^5*r12[]^3)-(60*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]])/(c^5*r12[]^3)-(30*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3)-(4*G^2*m1*m2*S1ij[i,j]*Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3)+(30*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3)-(15*G*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b]*Scalar[n12i[a]*v2i[-a]]^2)/(2*c^5*r12[]^3)+(15*G*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b]*Scalar[n12i[a]*v2i[-a]]^2)/(2*c^5*r12[]^3)-(3*G*S1ij[j,a]*S2ij[i,-a]*Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3)+(15*G*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b]*Scalar[n12i[a]*v2i[-a]]^2)/(2*c^5*r12[]^3)+(3*G*S1ij[i,a]*S2ij[j,-a]*Scalar[n12i[a]*v2i[-a]]^2)/(c^5*r12[]^3)-(15*G*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b]*Scalar[n12i[a]*v2i[-a]]^2)/(2*c^5*r12[]^3)-(12*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)-(8*G^2*m1*m2*S1ij[i,j]*Scalar[v1i[a]*v2i[-a]])/(3*c^5*r12[]^3)+(12*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)-(3*G*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)+(3*G*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)-(2*G*S1ij[j,a]*S2ij[i,-a]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)+(3*G*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)+(2*G*S1ij[i,a]*S2ij[j,-a]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)-(3*G*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b]*Scalar[v1i[a]*v2i[-a]])/(c^5*r12[]^3)+(6*G^2*m1*m2*n12i[a]*n12i[j]*S1ij[i,-a]*Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3)+(4*G^2*m1*m2*S1ij[i,j]*Scalar[v2i[-a]*v2i[a]])/(3*c^5*r12[]^3)-(6*G^2*m1*m2*n12i[a]*n12i[i]*S1ij[j,-a]*Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3)+(3*G*n12i[a]*n12i[j]*S1ij[i,b]*S2ij[-a,-b]*Scalar[v2i[-a]*v2i[a]])/(2*c^5*r12[]^3)-(3*G*n12i[a]*n12i[i]*S1ij[j,b]*S2ij[-a,-b]*Scalar[v2i[-a]*v2i[a]])/(2*c^5*r12[]^3)+(G*S1ij[j,a]*S2ij[i,-a]*Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3)-(3*G*n12i[a]*n12i[b]*S1ij[j,-a]*S2ij[i,-b]*Scalar[v2i[-a]*v2i[a]])/(2*c^5*r12[]^3)-(G*S1ij[i,a]*S2ij[j,-a]*Scalar[v2i[-a]*v2i[a]])/(c^5*r12[]^3)+(3*G*n12i[a]*n12i[b]*S1ij[i,-a]*S2ij[j,-b]*Scalar[v2i[-a]*v2i[a]])/(2*c^5*r12[]^3)+(18*G^2*m1*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[a])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[a])/(c^5*r12[]^3)+(3*G*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v1i[a])/(c^5*r12[]^3)-(3*G*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v1i[a])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[a])/(c^5*r12[]^3)-(6*G*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v1i[a])/(c^5*r12[]^3)+(6*G*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v1i[a])/(c^5*r12[]^3)-(3*G*n12i[a]*S1ij[j,-b]*S2ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[b])/(c^5*r12[]^3)+(3*G*n12i[a]*S1ij[i,-b]*S2ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[b])/(c^5*r12[]^3)+(6*G*n12i[a]*S1ij[j,-b]*S2ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[b])/(c^5*r12[]^3)-(6*G*n12i[a]*S1ij[i,-b]*S2ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[b])/(c^5*r12[]^3)+(2*G*S1ij[j,-a]*S2ij[i,-b]*v1i[a]*v1i[b])/(c^5*r12[]^3)-(2*G*S1ij[i,-a]*S2ij[j,-b]*v1i[a]*v1i[b])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[i])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[i])/(c^5*r12[]^3)+(8*G^2*m1*m2*S1ij[j,-a]*v1i[a]*v1i[i])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v1i[j])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v1i[j])/(c^5*r12[]^3)-(8*G^2*m1*m2*S1ij[i,-a]*v1i[a]*v1i[j])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[a])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[a])/(c^5*r12[]^3)-(3*G*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v2i[a])/(c^5*r12[]^3)+(3*G*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v2i[a])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[a])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[a])/(c^5*r12[]^3)+(3*G*n12i[j]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v2i[a])/(c^5*r12[]^3)-(3*G*n12i[i]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v2i[a])/(c^5*r12[]^3)-(8*G^2*m1*m2*S1ij[j,-a]*v1i[i]*v2i[a])/(c^5*r12[]^3)+(8*G^2*m1*m2*S1ij[i,-a]*v1i[j]*v2i[a])/(c^5*r12[]^3)+(3*G*n12i[a]*S1ij[j,-b]*S2ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[b])/(c^5*r12[]^3)-(3*G*n12i[a]*S1ij[i,-b]*S2ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[b])/(c^5*r12[]^3)-(6*G*n12i[a]*S1ij[j,-b]*S2ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[b])/(c^5*r12[]^3)+(6*G*n12i[a]*S1ij[i,-b]*S2ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[b])/(c^5*r12[]^3)-(2*G*S1ij[j,-b]*S2ij[i,-a]*v1i[a]*v2i[b])/(c^5*r12[]^3)-(4*G*S1ij[j,-a]*S2ij[i,-b]*v1i[a]*v2i[b])/(c^5*r12[]^3)+(2*G*S1ij[i,-b]*S2ij[j,-a]*v1i[a]*v2i[b])/(c^5*r12[]^3)+(4*G*S1ij[i,-a]*S2ij[j,-b]*v1i[a]*v2i[b])/(c^5*r12[]^3)+(2*G*S1ij[j,-a]*S2ij[i,-b]*v2i[a]*v2i[b])/(c^5*r12[]^3)-(2*G*S1ij[i,-a]*S2ij[j,-b]*v2i[a]*v2i[b])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(c^5*r12[]^3)-(3*G*n12i[a]*S1ij[j,b]*S2ij[-a,-b]*Scalar[n12i[a]*v1i[-a]]*v2i[i])/(c^5*r12[]^3)-(3*G*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v2i[i])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[i])/(c^5*r12[]^3)+(3*G*n12i[a]*S1ij[j,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v2i[i])/(c^5*r12[]^3)-(8*G^2*m1*m2*S1ij[j,-a]*v1i[a]*v2i[i])/(c^5*r12[]^3)+(8*G^2*m1*m2*S1ij[j,-a]*v2i[a]*v2i[i])/(c^5*r12[]^3)-(18*G^2*m1*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v1i[-a]]*v2i[j])/(c^5*r12[]^3)+(3*G*n12i[a]*S1ij[i,b]*S2ij[-a,-b]*Scalar[n12i[a]*v1i[-a]]*v2i[j])/(c^5*r12[]^3)+(3*G*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v1i[b]]*v2i[j])/(c^5*r12[]^3)+(18*G^2*m1*m2*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*v2i[-a]]*v2i[j])/(c^5*r12[]^3)-(3*G*n12i[a]*S1ij[i,-a]*Scalar[n12i[a]*S2ij[-a,-b]*v2i[b]]*v2i[j])/(c^5*r12[]^3)+(8*G^2*m1*m2*S1ij[i,-a]*v1i[a]*v2i[j])/(c^5*r12[]^3)-(8*G^2*m1*m2*S1ij[i,-a]*v2i[a]*v2i[j])/(c^5*r12[]^3)]]];(* 2.5PN order *)


s1dij[i_,j_,order_]:=S1dij[i,j]/;order>5;(* non-explicit expression for highest orders *)


(* explicit expressions for the PN precession of the second spinning point-body from those of the first spinning point-body *)

s2dij[i_,j_,order_]:=0/;order<2;
Do[IndexSet[s2dij[i_,j_,kc],ScreenDollarIndices[s1dij[i,j,kc]/. ruleexchange12]],{kc,2,5}];
s2dij[i_,j_,order_]:=S2dij[i,j]/;order>5;


s1di[i_,order_]:=0/;order<2;(* no contribution below 1PN order *)


IndexSet[s1di[i_,2],Expand[((G*m2*S1i[i]*Scalar[n12i[a]*v1i[-a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[S1i[a]*v1i[-a]])/r12[]^2-(G*m2*S1i[i]*Scalar[n12i[a]*v2i[-a]])/r12[]^2+(2*G*m2*n12i[i]*Scalar[S1i[a]*v2i[-a]])/r12[]^2+(G*m2*Scalar[n12i[a]*S1i[-a]]*v1i[i])/r12[]^2-(2*G*m2*Scalar[n12i[a]*S1i[-a]]*v2i[i])/r12[]^2)/c^2]]; (* 1PN order *)


IndexSet[s1di[i_,3],ScreenDollarIndices[s1di[i,2]+0]]; (* 1.5PN order *)


IndexSet[s1di[i_,4],ScreenDollarIndices[s1di[i,3]+Expand[((G^2*m1*m2*S1i[i]*Scalar[n12i[a]*v1i[-a]])/r12[]^3-(G^2*m2^2*S1i[i]*Scalar[n12i[a]*v1i[-a]])/r12[]^3-(16*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v1i[-a]])/r12[]^3+(2*G^2*m2^2*n12i[i]*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v1i[-a]])/r12[]^3+(3*G^2*m1*m2*n12i[i]*Scalar[S1i[a]*v1i[-a]])/r12[]^3+(G^2*m2^2*S1i[i]*Scalar[n12i[a]*v2i[-a]])/r12[]^3+(16*G^2*m1*m2*n12i[i]*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^3-(2*G^2*m2^2*n12i[i]*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v2i[-a]])/r12[]^3-(3*G*m2*S1i[i]*Scalar[n12i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/(2*r12[]^2)+(3*G*m2*n12i[i]*Scalar[S1i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2)/r12[]^2+(3*G*m2*S1i[i]*Scalar[n12i[a]*v2i[-a]]^3)/(2*r12[]^2)-(7*G^2*m1*m2*n12i[i]*Scalar[S1i[a]*v2i[-a]])/r12[]^3-(3*G*m2*n12i[i]*Scalar[n12i[a]*v2i[-a]]^2*Scalar[S1i[a]*v2i[-a]])/r12[]^2+(2*G*m2*n12i[i]*Scalar[S1i[a]*v1i[-a]]*Scalar[v1i[a]*v2i[-a]])/r12[]^2+(G*m2*S1i[i]*Scalar[n12i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[S1i[a]*v2i[-a]]*Scalar[v1i[a]*v2i[-a]])/r12[]^2-(2*G*m2*n12i[i]*Scalar[S1i[a]*v1i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^2-(G*m2*S1i[i]*Scalar[n12i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^2+(2*G*m2*n12i[i]*Scalar[S1i[a]*v2i[-a]]*Scalar[v2i[-a]*v2i[a]])/r12[]^2+(6*G^2*m1*m2*Scalar[n12i[a]*S1i[-a]]*v1i[i])/r12[]^3-(G^2*m2^2*Scalar[n12i[a]*S1i[-a]]*v1i[i])/r12[]^3-(G*m2*Scalar[S1i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v1i[i])/r12[]^2-(3*G*m2*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v1i[i])/(2*r12[]^2)+(G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[S1i[a]*v2i[-a]]*v1i[i])/r12[]^2-(5*G^2*m1*m2*Scalar[n12i[a]*S1i[-a]]*v2i[i])/r12[]^3+(5*G^2*m2^2*Scalar[n12i[a]*S1i[-a]]*v2i[i])/r12[]^3+(2*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[S1i[a]*v1i[-a]]*v2i[i])/r12[]^2-(2*G*m2*Scalar[S1i[a]*v1i[-a]]*Scalar[n12i[a]*v2i[-a]]*v2i[i])/r12[]^2+(3*G*m2*Scalar[n12i[a]*S1i[-a]]*Scalar[n12i[a]*v2i[-a]]^2*v2i[i])/r12[]^2+(2*G*m2*Scalar[n12i[a]*v1i[-a]]*Scalar[S1i[a]*v2i[-a]]*v2i[i])/r12[]^2-(2*G*m2*Scalar[n12i[a]*v2i[-a]]*Scalar[S1i[a]*v2i[-a]]*v2i[i])/r12[]^2+(2*G*m2*Scalar[n12i[a]*S1i[-a]]*Scalar[v1i[a]*v2i[-a]]*v2i[i])/r12[]^2-(2*G*m2*Scalar[n12i[a]*S1i[-a]]*Scalar[v2i[-a]*v2i[a]]*v2i[i])/r12[]^2)/c^4]]];(* 2PN order *)


s1di[i_,order_]:=S1di[i]/;order>4;(* non-explicit expression for highest orders *)


(* explicit expressions for the PN precession of the second spinning point-body from those of the first spinning point-body *)

s2di[i_,order_]:=0/;order<2;
Do[IndexSet[s2di[i_,kc],ScreenDollarIndices[s1di[i,kc]/. ruleexchange12]],{kc,2,4}];
s2di[i_,order_]:=S2di[i]/;order>4;


sdCMi[i_,order_]:=0/;order<2;(* no contribution below 1PN order *)


IndexSet[sdCMi[i_,2],Expand[((-4*G*mtot*\[Nu]*nCMi[i]*Scalar[Si[a]*vCMi[-a]])/rCM[]^2-(2*G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^2+(2*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^2+(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^2+(3*G*mtot*\[Nu]*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/rCM[]^2+(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^2)/c^2]]; (* 1PN order *)


IndexSet[sdCMi[i_,3],ScreenDollarIndices[sdCMi[i,2]+0]]; (* 1.5PN order *)


IndexSet[sdCMi[i_,4],ScreenDollarIndices[sdCMi[i,3]+Expand[((-14*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]])/rCM[]^3+(2*G^2*mtot^2*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]])/rCM[]^3-(G^2*mtot^2*\[Delta]*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]])/(2*rCM[]^3)+(7*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[Si[a]*vCMi[-a]])/rCM[]^3-(8*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[Si[a]*vCMi[-a]])/rCM[]^3+(3*G*mtot*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[Si[a]*vCMi[-a]])/rCM[]^2-(6*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[Si[a]*vCMi[-a]])/rCM[]^2-(4*G^2*mtot^2*\[Delta]*\[Nu]^2*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^3-(3*G*mtot*\[Delta]*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^2-(2*G*mtot*\[Nu]*nCMi[i]*Scalar[Si[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^2-(G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^3+(2*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^3-(3*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^3*Si[i])/(2*rCM[]^2)+(3*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*Si[i])/rCM[]^2+(G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Si[i])/rCM[]^2-(2*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Si[i])/rCM[]^2-(G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^3+(G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^3+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*Sigmai[i])/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Sigmai[i])/rCM[]^2+(4*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/rCM[]^3-(6*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/rCM[]^3-(G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^3-(7*G^2*mtot^2*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/(2*rCM[]^3)-(3*G*mtot*\[Nu]*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]]^2*vCMi[i])/rCM[]^2+(15*G*mtot*\[Nu]^2*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]]^2*vCMi[i])/(2*rCM[]^2)+(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]]^2*vCMi[i])/rCM[]^2+(2*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Si[a]*vCMi[-a]]*vCMi[i])/rCM[]^2-(6*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Si[a]*vCMi[-a]]*vCMi[i])/rCM[]^2-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Sigmai[a]*vCMi[-a]]*vCMi[i])/rCM[]^2+(2*G*mtot*\[Nu]*Scalar[nCMi[a]*Si[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2-(4*G*mtot*\[Nu]^2*Scalar[nCMi[a]*Si[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2-(3*G*mtot*\[Delta]*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(2*rCM[]^2))/c^4]]];(* 2PN order *)


sdCMi[i_,order_]:=SdCMi[i]/;order>4;(* non-explicit expression for highest orders *)


sigmadCMi[i_,order_]:=0/;order<2;(* no contribution below 1PN order *)


IndexSet[sigmadCMi[i_,2],Expand[((-2*G*mtot*\[Delta]*nCMi[i]*Scalar[Si[a]*vCMi[-a]])/rCM[]^2-(2*G*mtot*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^2+(4*G*mtot*\[Nu]*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^2+(G*mtot*\[Delta]*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^2+(G*mtot*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^2-(2*G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^2+(G*mtot*\[Delta]*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/rCM[]^2+(G*mtot*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^2-(G*mtot*\[Nu]*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^2)/c^2]]; (* 1PN order *)


IndexSet[sigmadCMi[i_,3],ScreenDollarIndices[sigmadCMi[i,2]+0]]; (* 1.5PN order *)


IndexSet[sigmadCMi[i_,4],ScreenDollarIndices[sigmadCMi[i,3]+Expand[((2*G^2*mtot^2*\[Delta]*nCMi[i]*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]])/rCM[]^3-(G^2*mtot^2*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]])/(2*rCM[]^3)+(2*G^2*mtot^2*nCMi[i]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]])/rCM[]^3-(45*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]])/(2*rCM[]^3)+(2*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]])/rCM[]^3-(4*G^2*mtot^2*\[Delta]*\[Nu]*nCMi[i]*Scalar[Si[a]*vCMi[-a]])/rCM[]^3-(3*G*mtot*\[Delta]*\[Nu]*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[Si[a]*vCMi[-a]])/rCM[]^2+(3*G^2*mtot^2*\[Nu]*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^3+(8*G^2*mtot^2*\[Nu]^2*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^3+(6*G*mtot*\[Nu]^2*nCMi[i]*Scalar[nCMi[a]*vCMi[-a]]^2*Scalar[Sigmai[a]*vCMi[-a]])/rCM[]^2-(2*G*mtot*\[Nu]*nCMi[i]*Scalar[Sigmai[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]])/rCM[]^2-(G^2*mtot^2*\[Delta]*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^3+(G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Si[i])/rCM[]^3+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]^3*Si[i])/(2*rCM[]^2)-(G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Si[i])/rCM[]^2-(G^2*mtot^2*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^3+(4*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^3-(2*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Sigmai[i])/rCM[]^3-(3*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]^3*Sigmai[i])/rCM[]^2+(2*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[vCMi[-a]*vCMi[a]]*Sigmai[i])/rCM[]^2-(G^2*mtot^2*\[Delta]*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/rCM[]^3-(7*G^2*mtot^2*\[Delta]*\[Nu]*Scalar[nCMi[a]*Si[-a]]*vCMi[i])/(2*rCM[]^3)-(G^2*mtot^2*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^3+(9*G^2*mtot^2*\[Nu]*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/(2*rCM[]^3)+(8*G^2*mtot^2*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*vCMi[i])/rCM[]^3+(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*Si[-a]]*Scalar[nCMi[a]*vCMi[-a]]^2*vCMi[i])/rCM[]^2-(9*G*mtot*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[nCMi[a]*vCMi[-a]]^2*vCMi[i])/(2*rCM[]^2)-(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Si[a]*vCMi[-a]]*vCMi[i])/rCM[]^2-(G*mtot*\[Nu]*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Sigmai[a]*vCMi[-a]]*vCMi[i])/rCM[]^2+(6*G*mtot*\[Nu]^2*Scalar[nCMi[a]*vCMi[-a]]*Scalar[Sigmai[a]*vCMi[-a]]*vCMi[i])/rCM[]^2-(3*G*mtot*\[Delta]*\[Nu]*Scalar[nCMi[a]*Si[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(2*rCM[]^2)+(G*mtot*\[Nu]*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/(2*rCM[]^2)+(2*G*mtot*\[Nu]^2*Scalar[nCMi[a]*Sigmai[-a]]*Scalar[vCMi[-a]*vCMi[a]]*vCMi[i])/rCM[]^2)/c^4]]];(* 2PN order *)


sigmadCMi[i_,order_]:=SigmadCMi[i]/;order>4;(* non-explicit expression for highest orders *)


Options[TimeDerivative]={SpinFlag->NoSpin};


DefInertHead[TimeDerivative];
TimeDerivative[expr_,accur_,order_Integer: 1,opts___?OptionQ]:=Module[

{dert,res,a1i,a2i,S1di,S2di,S1dij,S2dij,aCMi,SdCMi,SigmadCMi,spinflag=SpinFlag/. Flatten[{opts}]/. Options[TimeDerivative]},

r/:ParamD[t][r[]]:=0;
r1/:ParamD[t][r1[]]:=-Scalar[n1i[j] v1i[-j]];
r2/:ParamD[t][r2[]]:=-Scalar[n2i[j] v2i[-j]];
r12/:ParamD[t][r12[]]:=Scalar[n12i[j] v1i[-j]]-Scalar[n12i[j] v2i[-j]];
ni/:ParamD[t][ni[i_]]:=0;
n1i/:ParamD[t][n1i[i_]]:=(n1i[i] Scalar[n1i[j] v1i[-j]]-v1i[i])/r1[];
n2i/:ParamD[t][n2i[i_]]:=(n2i[i] Scalar[n2i[j] v2i[-j]]-v2i[i])/r2[];
n12i/:ParamD[t][n12i[i_]]:=(v1i[i]-v2i[i]+n12i[i] Scalar[n12i[j] v2i[-j]]-n12i[i] Scalar[n12i[j] v1i[-j]])/r12[];
y1i/:ParamD[t][y1i[i_]]:=v1i[i];
y2i/:ParamD[t][y2i[i_]]:=v2i[i];
v1i/:ParamD[t][v1i[i_]]:=a1i[i];
v2i/:ParamD[t][v2i[i_]]:=a2i[i];
S1i/:ParamD[t][S1i[i_]]:=S1di[i];
S2i/:ParamD[t][S2i[i_]]:=S2di[i];
S1ij/:ParamD[t][S1ij[i_,j_]]:=S1dij[i,j];
S2ij/:ParamD[t][S2ij[i_,j_]]:=S2dij[i,j];
dirac1/:ParamD[t][dirac1[indices___]]:=-Module[{i},PutScalar[v1i[i] dirac1[indices,-i]]];dirac2/:ParamD[t][dirac2[indices___]]:=-Module[{i},PutScalar[v2i[i] dirac2[indices,-i]]];

rCM/: ParamD[t][rCM[]]:=Scalar[nCMi[j] vCMi[-j]];
nCMi/: ParamD[t][nCMi[i_]]:=(vCMi[i]-nCMi[i] Scalar[nCMi[j] vCMi[-j]])/rCM[];
vCMi/: ParamD[t][vCMi[i_]]:=aCMi[i];
Si/: ParamD[t][Si[i_]]:=SdCMi[i];
Sigmai/: ParamD[t][Sigmai[i_]]:=SigmadCMi[i];

ParamD[t][Scalar[arg_]]:=PutScalar[ParamD[t][arg]];

(* dert: main function called by TimeDerivative *)

dert[var_Plus]:=dert/@var; (* action on a sum *)

dert[expr1_]:=(Module[{precision},precision=accur+Exponent[expr1,c];
S1di[i_]:=s1di[i,precision];
S2di[i_]:=s2di[i,precision];
S1dij[i_,j_]:=s1dij[i,j,precision];
S2dij[i_,j_]:=s2dij[i,j,precision];
SdCMi[i_]:=sdCMi[i,precision];
SigmadCMi[i_]:=sigmadCMi[i,precision];
Switch[spinflag,
NoSpin,
a1i[i_]:=A1i[i,precision];
a2i[i_]:=A2i[i,precision];
aCMi[i_]:=ACMi[i,precision];,
SpinVector,
a1i[i_]:=A1si[i,precision];
a2i[i_]:=A2si[i,precision];
aCMi[i_]:=AsCMi[i,precision];,
SpinTensor,
a1i[i_]:=A1Si[i,precision];
a2i[i_]:=A2Si[i,precision];,
_,
Print["Unknown option in TimeDerivative."]];
ParamD[t][expr1]]); (* action on monomials; actual computation of the first time derivative with the PN expressions of both accelarations to the precssion required for the expression being differentiated *)


res=Nest[SameDummies[#/.Scalar[arg_]:>Scalar@samedummies[arg]]&@PutScalar[#]&@ContractMetric[
If[Head[#]=!=Plus,
dert[#],
Module[{resloop=0},Do[resloop+=dert[#[[termnumber]]],{termnumber,1,Length[#]}];resloop]]]&,Truncate[expr,accur],order];
(* application of dert on each term of the expression being differentiated truncated at the relevant PN order in turn; iteration of the previous operation by means of Nest consistently with the order of derivative *)

r/:ParamD[t][r[]]=.;
r1/:ParamD[t][r1[]]=.;
r2/:ParamD[t][r2[]]=.;
r12/:ParamD[t][r12[]]=.;
ni/:ParamD[t][ni[i_]]=.;
n1i/:ParamD[t][n1i[i_]]=.;
n2i/:ParamD[t][n2i[i_]]=.;
n12i/:ParamD[t][n12i[i_]]=.;
y1i/:ParamD[t][y1i[i_]]=.;
y2i/:ParamD[t][y2i[i_]]=.;
v1i/:ParamD[t][v1i[i_]]=.;
v2i/:ParamD[t][v2i[i_]]=.;
S1i/:ParamD[t][S1i[i_]]=.;
S2i/:ParamD[t][S2i[i_]]=.;
S1ij/:ParamD[t][S1ij[i_,j_]]=.;
S2ij/:ParamD[t][S2ij[i_,j_]]=.;
dirac1/:ParamD[t][dirac1[indices___]]=.;
dirac2/:ParamD[t][dirac2[indices___]]=.;

rCM/: ParamD[t][rCM[]]=.;
nCMi/: ParamD[t][nCMi[i_]]=.;
vCMi/: ParamD[t][vCMi[i_]]=.;
Si/: ParamD[t][Si[i_]]=.;
Sigmai/: ParamD[t][Sigmai[i_]]=.; (* clearing the values taken by the symbol after time differentiation *)

res

];


spacederivative[expr_,flag_]:=expr;
spacederivative[expr_,indices__,flag_]:=Module[{der,res},
Switch[flag,
0,
r/:PD[i_][r[]]:=ni[i];
r1/:PD[i_][r1[]]:=n1i[i];
r2/:PD[i_][r2[]]:=n2i[i];
r12/:PD[i_][r12[]]:=0;
ni/:PD[i_][ni[k_]]:=(Metricdelta[i,k]-ni[i] ni[k])/r[];
n1i/:PD[i_][n1i[k_]]:=(Metricdelta[i,k]-n1i[i] n1i[k])/r1[];
n2i/:PD[i_][n2i[k_]]:=(Metricdelta[i,k]-n2i[i] n2i[k])/r2[];
n12i/:PD[i_][n12i[k_]]:=0;
y1i/:PD[i_][y1i[k_]]:=0;
y2i/:PD[i_][y2i[k_]]:=0;
v1i/:PD[i_][v1i[k_]]:=0;
v2i/:PD[i_][v2i[k_]]:=0;
p1i/:PD[i_][p1i[k_]]:=0;
p2i/:PD[i_][p2i[k_]]:=0;
S1i/:PD[i_][S1i[k_]]:=0;
S2i/:PD[i_][S2i[k_]]:=0;
S1ij/:PD[i_][S1ij[k_,l_]]:=0;
S2ij/:PD[i_][S2ij[k_,l_]]:=0;
S10i/:PD[i_][S10i[k_]]:=0;
S20i/:PD[i_][S20i[k_]]:=0;
S1dij/:PD[i_][S1dij[k_,l_]]:=0;
S2dij/:PD[i_][S2dij[k_,l_]]:=0;
dirac1/:PD[i_][dirac1[ind___]]:=dirac1[ind,i];
dirac2/:PD[i_][dirac2[ind___]]:=dirac2[ind,i];,
1,
r/:PD[i_][r[]]:=0;
r1/:PD[i_][r1[]]:=-n1i[i];
r2/:PD[i_][r2[]]:=0;
r12/:PD[i_][r12[]]:=n12i[i];
ni/:PD[i_][ni[k_]]:=0;
n1i/:PD[i_][n1i[k_]]:=-(Metricdelta[i,k]-n1i[i] n1i[k])/r1[];
n2i/:PD[i_][n2i[k_]]:=0;
n12i/:PD[i_][n12i[k_]]:=(Metricdelta[i,k]-n12i[i] n12i[k])/r12[];
y1i/:PD[i_][y1i[k_]]:=Metricdelta[i,k];
y2i/:PD[i_][y2i[k_]]:=0;
v1i/:PD[i_][v1i[k_]]:=0;
v2i/:PD[i_][v2i[k_]]:=0;
p1i/:PD[i_][p1i[k_]]:=0;
p2i/:PD[i_][p2i[k_]]:=0;
S1i/:PD[i_][S1i[k_]]:=0;
S2i/:PD[i_][S2i[k_]]:=0;
S1ij/:PD[i_][S1ij[k_,l_]]:=0;
S2ij/:PD[i_][S2ij[k_,l_]]:=0;
S10i/:PD[i_][S10i[k_]]:=0;
S20i/:PD[i_][S20i[k_]]:=0;
S1dij/:PD[i_][S1dij[k_,l_]]:=0;
S2dij/:PD[i_][S2dij[k_,l_]]:=0;
dirac1/:PD[i_][dirac1[ind___]]:=-dirac1[ind,i];
dirac2/:PD[i_][dirac2[ind___]]:=0;,
2,
r/:PD[i_][r[]]:=0;
r1/:PD[i_][r1[]]:=0;
r2/:PD[i_][r2[]]:=-n2i[i];
r12/:PD[i_][r12[]]:=-n12i[i];
ni/:PD[i_][ni[k_]]:=0;
n1i/:PD[i_][n1i[k_]]:=0;
n2i/:PD[i_][n2i[k_]]:=-(Metricdelta[i,k]-n2i[i] n2i[k])/r2[];
n12i/:PD[i_][n12i[k_]]:=-(Metricdelta[i,k]-n12i[i] n12i[k])/r12[];
y1i/:PD[i_][y1i[k_]]:=0;
y2i/:PD[i_][y2i[k_]]:=Metricdelta[i,k];
v1i/:PD[i_][v1i[k_]]:=0;
v2i/:PD[i_][v2i[k_]]:=0;
p1i/:PD[i_][p1i[k_]]:=0;
p2i/:PD[i_][p2i[k_]]:=0;
S1i/:PD[i_][S1i[k_]]:=0;
S2i/:PD[i_][S2i[k_]]:=0;
S1ij/:PD[i_][S1ij[k_,l_]]:=0;
S2ij/:PD[i_][S2ij[k_,l_]]:=0;
S10i/:PD[i_][S10i[k_]]:=0;
S20i/:PD[i_][S20i[k_]]:=0;
S1dij/:PD[i_][S1dij[k_,l_]]:=0;
S2dij/:PD[i_][S2dij[k_,l_]]:=0;
dirac1/:PD[i_][dirac1[ind___]]:=0;
dirac2/:PD[i_][dirac2[ind___]]:=-dirac2[ind,i];];

Unprotect[PD];
PD[i_][Scalar[arg_]]:=PutScalarProduct[PD[i][ReplaceDummies[arg]]];
Protect[PD];
der=Fold[(ToCanonical[PD[#2][#1]]&),#1,{##2}]&;
res=ToCanonical@PutScalar@ContractMetric@der[Expand[expr /. Scalar[arg_]:>Scalar@Expand[arg]],indices];

r/:PD[i_][r[]]=.;
r1/:PD[i_][r1[]]=.;
r2/:PD[i_][r2[]]=.;
r12/:PD[i_][r12[]]=.;
ni/:PD[i_][ni[k_]]=.;
n1i/:PD[i_][n1i[k_]]=.;
n2i/:PD[i_][n2i[k_]]=.;
n12i/:PD[i_][n12i[k_]]=.;
y1i/:PD[i_][y1i[k_]]=.;
y2i/:PD[i_][y2i[k_]]=.;
v1i/:PD[i_][v1i[k_]]=.;
v2i/:PD[i_][v2i[k_]]=.;
p1i/:PD[i_][p1i[k_]]=.;
p2i/:PD[i_][p2i[k_]]=.;
S1i/:PD[i_][S1i[k_]]=.;
S2i/:PD[i_][S2i[k_]]=.;
S1ij/:PD[i_][S1ij[k_,l_]]=.;
S2ij/:PD[i_][S2ij[k_,l_]]=.;
S10i/:PD[i_][S10i[k_]]=.;
S20i/:PD[i_][S20i[k_]]=.;
S1dij/:PD[i_][S1dij[k_,l_]]=.;
S2dij/:PD[i_][S2dij[k_,l_]]=.;
dirac1/:PD[i_][dirac1[ind___]]=.;
dirac2/:PD[i_][dirac2[ind___]]=.;(* clearing the values taken by the symbol after space-type differentiation *)

res]; (* index conflicts with i in the argument of PutScalar are avoided by means of ReplaceDummies *)


DefInertHead[Derivativex]
Derivativex[expr_,indices___]:=spacederivative[expr,indices,0];


DefInertHead[Derivativey1]
Derivativey1[expr_,indices___]:=spacederivative[expr,indices,1];


DefInertHead[Derivativey2]
Derivativey2[expr_,indices___]:=spacederivative[expr,indices,2];


FindIndices[Derivativex[expr_,inds___]]^:=Join[FindIndices[expr],IndexList[inds]];
FindIndices[Derivativey1[expr_,inds___]]^:=Join[FindIndices[expr],IndexList[inds]];
FindIndices[Derivativey2[expr_,inds___]]^:=Join[FindIndices[expr],IndexList[inds]];


$MaxDummyNumber=100;

listsymbmathtens={"R1","n1","y1","v1","a1","S1","S1p","S1ij","S10i","S1dij","p1","m1","r1","s1","n12","n","v","a","Delta","Deltap","delta","dirac1","R2","n2","y2","v2","a2","S2","S2p","S2ij","S20i","S2dij","p2","m2","r2","s2","dirac2","G","c","R12","rr","R","nn","S","Sp","Kdelta","Epsilon","m","nu","r00","r0","eps","lambda","kappa","zeta","xi","n1v1","n1v2","n2v1","n2v2","n12v1","n12v2","n1p1","n1p2","n2p1","n2p2","n12p1","n12p2","n1s1","n1s2","n2s1","n2s2","n12s1","n12s2","v1v1","v1v2","v2v2","vv","y1y1","y1y2","y2y2","n12y1","y1v1","y1v2","n12y2","y2v1","y2v2","s1v1","s1v2","s2v1","s2v2","nv","s1s1","s1s2","s2s2","n12n1","n12n2","n2n1"};

listexprxtens=(listexpr12 /. tens_?xTensorQ[indices__]->tens)~Join~listexpr0~Join~{Scalar[n1i[a]*v1i[-a]],Scalar[n1i[a]*v2i[-a]],Scalar[n2i[a]*v1i[-a]],Scalar[n2i[a]*v2i[-a]],Scalar[n12i[a]*v1i[-a]],Scalar[n12i[a]*v2i[-a]],Scalar[n1i[a]*p1i[-a]],Scalar[n1i[a]*p2i[-a]],Scalar[n2i[a]*p1i[-a]],Scalar[n2i[a]*p2i[-a]],Scalar[n12i[a]*p1i[-a]],Scalar[n12i[a]*p2i[-a]],Scalar[n1i[a]*S1i[-a]],Scalar[n1i[a]*S2i[-a]],Scalar[n2i[a]*S1i[-a]],Scalar[n2i[a]*S2i[-a]],Scalar[n12i[a]*S1i[-a]],Scalar[n12i[a]*S2i[-a]],
Scalar[v1i[-a]*v1i[a]],Scalar[v1i[a]*v2i[-a]],Scalar[v2i[-a]*v2i[a]],Scalar[vCMi[-a]*vCMi[a]],Scalar[y1i[-a]*y1i[a]],Scalar[y1i[a]*y2i[-a]],Scalar[y2i[-a]*y2i[a]],Scalar[n12i[-a]*y1i[a]],Scalar[v1i[-a]*y1i[a]],Scalar[v2i[-a]*y1i[a]],Scalar[n12i[-a]*y2i[a]],Scalar[v1i[-a]*y2i[a]],Scalar[v2i[-a]*y2i[a]], Scalar[v1i[-a]*S1i[a]],Scalar[v2i[-a]*S1i[a]],Scalar[v1i[-a]*S2i[a]],Scalar[v2i[-a]*S2i[a]],Scalar[nCMi[a]*vCMi[-a]],Scalar[S1i[-a]*S1i[a]],Scalar[S1i[a]*S2i[-a]],Scalar[S2i[-a]*S2i[a]],Scalar[n12i[a]*n1i[-a]],Scalar[n12i[a]*n2i[-a]],Scalar[n1i[a]*n2i[-a]]};



End[];
PNComBin`Private`indexlistPNComBin=GetIndicesOfVBundle[TangentE3,15+2$MaxDummyNumber];
Begin["`Private`"];


FromMathTensorToxTensor[expr_]:=Module[

{listsymbexpr=Select[Union@Cases[expr,arg_Symbol,Infinity,Heads->True],FreeQ[Context[#],"System`"]&],

listindmathtens=Flatten[Function[{arg1,arg2},(arg1<>#&/@CharacterRange["a","o"]~Join~(ToString/@Range[1,$MaxDummyNumber]))~Join~(arg2<>#&/@(ToString/@Range[1,$MaxDummyNumber]))]@@@{{"l","lo$"},{"u","up$"}}],

ruleMathTensorxTensorindices,

ruleMathTensorxTensorvariables,listbadcontextsymbexpr},

If[Intersection[listsymbexpr,ToExpression[listindmathtens~Join~listsymbmathtens]]=!=Sort[listsymbexpr]||MemberQ[Flatten[Context/@listsymbexpr],"xAct`xTensor`"],Print["Erroneous MathTensor input"];Return[$Failed]];

ruleMathTensorxTensorindices=Thread[Symbol/@listindmathtens->Flatten@Outer[Times,{-1,1},indexlistPNComBin]
]; (* rule changing all MathTensor indices into xTensor indices compatible with PNComBin*)

ruleMathTensorxTensorvariables=Thread[Symbol/@listsymbmathtens-> listexprxtens];
 (* rule for the quantities involved in the MathTensor input *)

listbadcontextsymbexpr= Select[listsymbexpr,MemberQ[Context[#],"PNComBin`"]&];

Scan[Print["MathTensor symbol ", #, " already used in the PNComBin context","\n"]&,listbadcontextsymbexpr];

expr/. ruleMathTensorxTensorindices~Join~ruleMathTensorxTensorvariables

];


Exchange12[expr_]:=If[And@@(MemberQ[Replace[Join[listexpr12,listexpr0,Flatten@IndicesOfVBundle[TangentE3]], symb_[___]->symb,{1}],#]&/@Cases[ScreenDollarIndices@expr,symb_Symbol /; Not@StringMatchQ[Context[symb],"System`*"|"xAct`*"],{0,Infinity},Heads->True]),expr /. ruleexchange12,Print["Erroneous PNComBin input"];Return[$Failed]];


FromUnitVectorScalarToDistances[expr_]:=expr /.Join[rulen12n1,rulen12n2,rulen1n2]; 


prodtoSTF[expr_Plus,vec_]:=(prodtoSTF[#,vec]&)/@expr; (* action on a sum *)

prodtoSTF[expr_Times,vec_]:=Module[{exprlist=List@@expr,arglist},

arglist=Cases[exprlist,vec[ind_]];
Times@@Complement[exprlist,arglist] prodtoSTFcore[Times@@arglist,vec]];
(* action on a product *)

prodtoSTF[vec_[ind_],vec_]:=prodtoSTFcore[vec[ind],vec]; (* action on vec[ind] *)

prodtoSTF[expr_,vec_]:=expr; (* action in all other cases *)

(* prodtoSTFcore[expr,vec]: main function called by ProductToSTF *)

prodtoSTFcore[expr_,vec_]:=Module[
{indexlist=List@@FindFreeIndices@Evaluate[expr],pind,headexpr, generatedindexlist, generatedindexsublist,blankindexlist,blankexpr,STFterm,STFexpr},

pind=Length[indexlist];

headexpr=Switch[vec,n1i,STFn1L,n2i,STFn2L,n12i,STFn12L,ni,STFnL];

generatedindexlist=GetIndicesOfVBundle[TangentE3,pind];

blankindexlist=Map[Pattern[#,Blank[]]&,generatedindexlist];

blankexpr=expr/. Thread[indexlist->blankindexlist];

STFterm[kind_]:=(

generatedindexsublist=Subsets[generatedindexlist,{2kind}];

Sum[SymmetrizeMetricProduct[Times@@Thread[Metricdelta[Take[generatedindexsublist[[ic]],kind],Take[generatedindexsublist[[ic]],{kind+1,2kind}]]]] *
headexpr@@Complement[generatedindexlist,generatedindexsublist[[ic]]],{ic,1,Length[generatedindexsublist]}]

);


STFexpr=Expand[headexpr@@generatedindexlist+Sum[((2pind-4kind+1)!!(2kind-1)!!/(2pind-2kind+1)!!)STFterm[kind],{kind,1,Floor[pind/2]}]];

DownValues[prodtoSTFcore]=Append[Sort[Append[Most@DownValues[prodtoSTFcore],HoldPattern[prodtoSTFcore[HoldPN[blankexpr],vec]]:>Evaluate[STFexpr]/. HoldPN[blankexpr]->blankexpr],ByteCount[#1]<ByteCount[#2]&],Last@DownValues[prodtoSTFcore]];

STFexpr /. Thread[generatedindexlist->indexlist]
]/;

MatchQ[expr,HoldPattern@Times[vec[_]...]| vec[_]|1];

(* computation of the STF decomposition of vec[_]...vec[_] and back-up;result prepended to DownValues[ToSTF] rather than saved by delayed setting in order to avoid infinite recursive loops *)

ProductToSTF[expr_,vec:(n1i|n2i|n12i|ni)]:=prodtoSTF[Expand[expr/. Scalar[var_]:>Scalar@Expand[var]],vec]; (* calling of ProductToSTF after the expansion of the first argument and the check of the second one *)


(* STFtoprodcore[expr,vec]: main function called by STFToProduct *)

STFtoprodcore[expr_,vec_]:=Module[

{indexlist=List@@FindFreeIndices@Evaluate[expr],pind,generatedindexlist,generatedindexsublists,blankindexlist,blankexpr,term,result},

pind=Length[indexlist];

generatedindexlist=GetIndicesOfVBundle[TangentE3,pind];

blankindexlist=Map[Pattern[#,Blank[]]&,generatedindexlist];

blankexpr=expr /. Thread[indexlist->blankindexlist];

term[kind_]:=(

generatedindexsublists=Subsets[generatedindexlist,{2kind}];

Sum[SymmetrizeMetricProduct[Times@@Thread[Metricdelta[Take[generatedindexsublists[[ic]],kind],Take[generatedindexsublists[[ic]],{kind+1,2kind}]]]]*
Times@@(vec/@Complement[generatedindexlist,generatedindexsublists[[ic]]]),{ic,1,Length[generatedindexsublists]}]

);

result=Expand[(expr/. Thread[indexlist->generatedindexlist])+Sum[((-1)^kind(2pind-2kind-1)!!(2kind-1)!!/(2pind-1)!!)term[kind],{kind,1,Floor[pind/2]}]];

DownValues[STFtoprodcore]=Append[Sort[Append[Most@DownValues[STFtoprodcore],HoldPattern[STFtoprodcore[HoldPN[blankexpr],vec]]:>Evaluate[result]/.HoldPN[blankexpr]->blankexpr],ByteCount[#1]<ByteCount[#2]&],Last@DownValues[STFtoprodcore]];

result /. Thread[generatedindexlist->indexlist]

]/;

MatchQ[expr,HoldPattern@Times[vec[_]...]| vec[_]|1];

(* computation of the STF part of vec[_]...vec[_] and back-up;result prepended to DownValues[STFtoprod] rather than saved by delayed setting in order to avoid infinite recursive loops *)

STFToProduct[expr_,vec:(n1i|n2i|n12i|ni)]:=expr/. Switch[vec,n1i,STFn1L[arg__],n2i,STFn2L[arg__],n12i,STFn12L[arg__],ni,STFnL[arg__]]:> STFtoprodcore[Times@@vec/@{arg},vec]; (* replacing all tensors STFvecL[arg] by STFtoproduct[expr,arg] after the expansion of the first argument and the check of the second one *)


DefInertHead[ang,DefInfo->None];
 
(* declaration of the linearization function *)
ang[exp_Plus,nvec_]:=ang[#,nvec]&/@exp; (* additivity *)

ang[fac_ xni_,nvec_]:=fac ang[xni,nvec] /; FreeQ[fac,DeleteCases[Alternatives[ni,n1i,n2i,r,r1,r2],Switch[nvec,ni,r,n1i,r1,n2i,r2]]]; (* linearity; it is crucial that the variable entering the function Condition precedes the other one in the alphabetical order! *)

ang[exp_,nvec_]:=exp/;FreeQ[exp,ni|n1i|n2i];(* non-action of Angularn on an expression exp that does not depend on ni[i] *)
(* general, non-specific, definition for Angularn *)

Angularn[expr_,nvec:(ni|n1i|n2i)]:=Module[{rrad=Switch[nvec,ni,r,n1i,r1,n2i,r2]},

PutScalar@ContractMetric[ang[NoScalar@Expand[expr],nvec] /. HoldPattern[ang[arg1_,arg2_]]:>Angularn[arg1,arg2]/;  MatchQ[arg1,HoldPattern@Times[nvec[_]...]| nvec[_]]]

]/; Not@MatchQ[expr,HoldPattern@Times[nvec[_]...]| nvec[_]];

(* main definition for Angularn *)

Angularn[expr_,nvec:(ni|n1i|n2i)]:=If[EvenQ@Length[expr],

Module[

{indexlist=List@@FindFreeIndices[expr],res},

res=SymmetrizeMetricProduct[Times@@(Apply[Metricdelta,Partition[indexlist,2],1])]/(Length[expr]+1)
],

0];


(* angularaverage1expanded[expr,varr,withscalarproducts]: subsidiary function called by AngularAverage1 *)

angularaverage1expanded[expr_Plus,varr_,withscalarproducts_]:=Module[

{averageresult},

averageresult=0;
Do[averageresult+=angularaverage1expanded[expr[[ic]],varr,withscalarproducts],{ic,Length[expr]}];Expand@Together@averageresult

]; (* action on a sum ressorting to a Do loop *)

angularaverage1expanded[expr_Times,varr_,True]:=Module[{explist=List@@expr,faclist,res},faclist=DeleteCases[explist,fac_?(Not@FreeQ[#,r1|r2|n1i|n2i]&)];
res=(Times@@faclist)* angularaverage1core[Times@@Complement[explist,faclist],varr,True]];
(* action on a product assuming the default option WithScalarProducts\[Rule]True; the function PutScalarProduct is not needed since it will be applied in angularaverage1core; epsilon tensors must not be kept in the integrand in order not to slow down the evaluation, hence it does not belong to the list of allowed variables in the FreeQ test *)

angularaverage1expanded[expr_Times,varr_,False]:=Module[{explist=List@@expr,faclist,res},faclist=DeleteCases[explist,fac_?(Not@FreeQ[#,r1|r2|n1i|n2i|epsilonMetricdelta]&)];
PutScalarProduct[(Times@@faclist)* angularaverage1core[Times@@Complement[explist,faclist],varr,False]]];
(* action on a product assuming the default option WithScalarProducts\[Rule]False; the function PutScalarProduct is now needed since it will be not applied in angularaverage1core; epsilon tensors must now be kept in the integrand in order to be properly contracted with possible Metricdelta or delta tensors, hence it belongs to the list of allowed variables in the FreeQ test *)

angularaverage1expanded[expr_,varr_,withscalarproducts_]:=angularaverage1core[expr,varr,withscalarproducts];(* definition needed for the case where the expression being integrated does not depend on n1i[i], r2[], nor n2i[i] *)

(* angularaverage1core[expr,varr,withscalarproducts]: main function called by AngularAverage1 through angularaverage1expanded *)

angularaverage1core[expr_,varr_,withscalarproducts_]:=Module[

{S,z,ruleS,ruleSTFdecomp,linear,sourceintegral,resultintegral,integral,result,ruleinfbound,rulesupbound,elementarysource},

ruleinfbound=S->2 varr;
rulesupbound=S->2 r1[]+2 r12[];
z=1-S (r1[]+r12[])/r1[]/r12[]+S^2/2/r1[]/r12[];
ruleS={n2i[a_]->1/r2[] (r1[] n1i[a]+r12[] n12i[a]),r2[]->(S-r1[]-r12[])};

linear[exp_Plus]:=linear/@exp;
linear[STFn1L[indices___] arg_.]:=linear[arg,indices];

integral[arg_,indices___]:=
(sourceintegral=arg LegendreP[Length[{indices}],z] (S-r1[]-r12[])/(r1[] r12[]);
resultintegral=integrateloop[sourceintegral,S];
1/2 STFtoprodcore[Times@@n12i/@{indices},n12i]resultintegral);

If[FreeQ[expr,r2|n2i],

result=Angularn[expr,n1i],

elementarysource=Expand@NoScalar[expr //. ruleS];
result=Expand@ProductToSTF[elementarysource,n1i];
result=linear[result]/.linear->integral;
result=(result/.rulesupbound)-(result/.ruleinfbound)

];

If[withscalarproducts,result=PutScalarProduct@Together@ContractMetric[result],result=Together[result],result=Together[result]];

LogExpand[ToCanonical[result],Assumptions->Switch[varr,r12[],0<r1[]<r12[],r1[],0<r12[]<r1[]]&& 0<r0&&0<s1&&0<s2]

]; (* tensorial simplifications are performed only with the option WithScalarProducts\[Rule]True *)

(* PutScalar not necessary outside VolumeIntegrate1; must epsilon be excluded?  *)

Options[AngularAverage1]={WithScalarProducts->True};

AngularAverage1[expr_,varr:(r1[]|r12[]),opts___?OptionQ]:=Module[{withscalarproducts},

{withscalarproducts}={WithScalarProducts}/. Flatten[{opts}]/. Options[AngularAverage1];

ToCanonical@Together@angularaverage1expanded[Expand[expr/. Scalar[var_]:>Scalar@Expand[var]],varr,withscalarproducts]];


inintegrate[expr_]:=Module[

{inintegral,ininbound,inoutbound,resultinintegral},

(* computation of the indefinite integral *)

inintegral=LogExpand[integrateloop[4Pi r1[]^2 expr,r1[],Assumptions->0<r1[]<r12[]&& 0<r0&&0<s1&&0<s2],Assumptions-> 0<r1[]<r12[]&&0<r0&&0<s1&&0<s2];(* the assumption in integrateloop avoids the appearance of conditionals, whereas that in LogExpand *)

(* evaluation of the indefinite integral at the inner boundary *)

ininbound=PowerExpand@Coefficient[seriesloop[Expand@inintegral,{r1[],0,0}]/.Log[r1[]]->Log[s1],r1[],0];

(* evaluation of the indefinite integral at the outer boundary *)

inoutbound=PowerExpand@seriesloop[Expand@inintegral/.r1[]->r12[](1-invar),{invar,0,0}];


resultinintegral=LogExpand@ToCanonical[inoutbound-ininbound]

];


outintegrate[expr_]:=Module[

{outint,inftyvaroutint,outinbound,outoutbound,resultoutintegral},

(* computation of the indefinite integral *)

outint=LogExpand[integrateloop[4Pi r1[]^2 expr,r1[]],Assumptions->0<r12[]<r1[]&&0<r0&&0<s1&&0<s2];

(* evaluation of the indefinite integral at the outer boundary *)

inftyvaroutint=ExpandAll[outint/.r1[]->r12[]/inftyvar];

outoutbound=PowerExpand@Refine[Coefficient[seriesloop[Expand@inftyvaroutint,{inftyvar,0,0}],inftyvar,0],0<inftyvar<1];

(* evaluation of the indefinite integral at the inner boundary *)

outinbound=PowerExpand@seriesloop[Expand@outint/.r1[]->r12[](1+outvar),{outvar,0,0}];


resultoutintegral=LogExpand@ToCanonical[outoutbound-outinbound]
];


\[Alpha]l[jc_]:=Expand[(-Scalar[y1i[i] y1i[-i]]^(jc/2) )(jc-1)!/(2jc-1)!! 2^(jc+1) JacobiP[jc,-1/2,-1/2,-Scalar[n1i[i]y1i[-i]]/Sqrt@Scalar[y1i[i]y1i[-i]]]];


(* volumeintegrate1[expr, memorize]: subsidiary function called by VolumeIntegrate1 *)

volumeintegrate1[expr_Plus,memorize_]:=Map[volumeintegrate1[#,memorize]&,expr]; (* action on a sum *)

volumeintegrate1[expr_,memorize_]:=volumeintegrate1expanded[NoScalar[expr],memorize]; (* action in all other cases *)

(* volumeintegrate1expanded[expr,memorize]: subsidiary function called by volumeintegrate1 *)

volumeintegrate1expanded[expr_Times,memorize_]:=Module[

{explist=List@@expr,faclist},

faclist=DeleteCases[explist,fac_?(Not@FreeQ[#,r1|r2|n1i|n2i]&)];

PutScalarProduct@ContractMetric[Times@@faclist volumeintegrate1core[Times@@Complement[explist,faclist],memorize]]
]; (* action on a product *)

volumeintegrate1expanded[expr_,memorize_]:=PutScalarProduct@ContractMetric[volumeintegrate1core[expr,memorize]]; (* action in all other cases *)

(* volumeintegrate1core[expr,memorize]: main function called by VolumeIntegrate1 through volumeintegrate1 and volumeintegrate1expanded *)

volumeintegrate1core[expr_,memorize_]:=Module[

{dummyindexlist,freeindexlist,indexlist,dummygeneratedindexlist,freegeneratedindexlist,generatedindexlist,blankindexlist,blankexp,listexp,intvar,sourceint,coefflogr0s1,inftyexpansion,coefflogr12s2,serint,inangularaverage1,inangularaverage1nolog,inangularaverage1logp,inangularaverage1logm,outangularaverage1,outangularaverage1nolog,outangularaverage1logp,outangularaverage1logm,inintegral,outintegral,resultint,termysum,termy,expon,kmax},

dummyindexlist=List@@FindDummyIndices[expr];
freeindexlist=List@@FindFreeIndices[expr];
indexlist=Join[dummyindexlist,freeindexlist];dummygeneratedindexlist=GetIndicesOfVBundle[TangentE3,Length[dummyindexlist]];
freegeneratedindexlist=GetIndicesOfVBundle[TangentE3,Length[freeindexlist],dummygeneratedindexlist];
generatedindexlist=Join[dummygeneratedindexlist,freegeneratedindexlist];
blankindexlist=Map[Pattern[#,Blank[]]&,generatedindexlist];
blankexp=expr/.Thread[indexlist->blankindexlist];

listexp=exchangeifneeded[expr]/. Thread[indexlist->generatedindexlist];

inftyexpansion=Expand[PowerExpand@Normal@Series[(listexp[[2]]/.ruler2n2tor1n1had1)/.r1[]->r12[]/intvar /. Scalar[arg_]:>Scalar@Expand[arg],{intvar,0,3}]/.intvar->r12[]/r1[]];
sourceint=listexp[[2]]-inftyexpansion;

coefflogr0s1=Hadamard1[r1[]^3 inftyexpansion];
coefflogr12s2=Hadamard2[r2[]^3 sourceint];
serint=Normal@Series[sourceint/.ruler1n1tor2n2had2,{r2[],0,-3}];
sourceint=ToCanonical[(sourceint-serint) /. n2i[i_]:>(r1[] n1i[i]+r12[] n12i[i])/r2[] /. Scalar[arg_]:>Scalar@Expand[arg]];


inangularaverage1=angularaverage1expanded[sourceint,r12[],False];
inintegral=inintegrate[inangularaverage1];


outangularaverage1=angularaverage1expanded[sourceint,r1[],False];
outangularaverage1=outangularaverage1+coefflogr12s2/r1[]^3;
outintegral=outintegrate[outangularaverage1];


resultint=Expand[inintegral+outintegral+4Pi coefflogr12s2 (Log[r12[]]-Log[s2])+4Pi (Log[r0]-Log[s1]) coefflogr0s1/.{Log[s1]->-Log[r12[]/s1]+Log[r12[]],Log[s2]->-Log[r12[]/s2]+Log[r12[]],Log[r0]->-Log[r12[]/r0]+Log[r12[]]}];

kmax=If[(expon=Exponent[inftyexpansion,r1[]])>=-3,expon,-3];
If[kmax==-3,termysum=0,termysum=ContractMetric[Sum[-1/2\[Alpha]l[jc] Coefficient[inftyexpansion,r1[],jc-3],{jc,1,kmax+3}]]];

termy=Hadamard1[termysum];
resultint=ContractMetric[resultint+4Pi termy];
If[First[listexp],resultint=resultint/.ruleexchange12];

If[memorize,

DownValues[volumeintegrate1core]=

Append[Sort[Append[Most@DownValues[volumeintegrate1core],(HoldPattern[volumeintegrate1core[HoldPN[blankexp],mem_]]/. HoldPN[blankexp]:>Evaluate[blankexp]):>Evaluate[HoldPN[Module[dummygeneratedindexlist,resultint]] /. {HoldPattern[dummygeneratedindexlist]->dummygeneratedindexlist,HoldPattern[resultint]-> resultint}]/.HoldPN[exp_]-> exp],ByteCount[#1]<ByteCount[#2]&],Last@DownValues[volumeintegrate1core]]

];

resultint /.  Thread[generatedindexlist->indexlist]

];(* construction of the effective source; computation of the inner angular and radial integrals; computation of the outer angular and radial integrals; evaluation of all Hadamard finite parts present in the final expression; back-up only with the option Memorize\[Rule]True *)


Options[VolumeIntegrate1]={Memorize->True};

VolumeIntegrate1[expr_,opts___?OptionQ]:=Module[{memorize},
{memorize}={Memorize}/. Flatten[{opts}]/. Options[VolumeIntegrate1];
If[memorize=!=True,DownValues[volumeintegrate1core]={Last@DownValues[volumeintegrate1core]}];ToCanonical@volumeintegrate1[Expand[expr/. Scalar[var_]:>Scalar@Expand[var]],memorize]];


weight[expr_Times,varr:(r1[]|r2[])]:=Module[

{res},

If[(res=-Exponent[expr,varr])<0,res=Abs[res]/3];
res+=Count[expr,Which[varr===r1[],n1i[_],varr===r2[],n2i[_]],Infinity]

];


exchangeifneeded[expr_]:=Module[{wght1,wght2,res={False,expr}},

If[(wght1=weight[expr,r1[]])<(wght2=weight[expr,r2[]])||wght1==wght2 && Count[expr,n1i[_]|Scalar[n1i[_] fac_],Infinity]<Count[expr,n2i[_]|Scalar[n2i[_] fac_],Infinity],res={True,expr/.ruleexchange12}];
res

];


Options[SaveVolumeIntegrate1]={Create->False};
Options[SaveVolumeIntegrate1]={Reset->False};

SaveVolumeIntegrate1[Optional[file_String,ToFileName[$PNComBinDirectory,"SavedVolumeIntegral1.out"]],opts___?OptionQ]:=Module[

{create,reset,nbdir, filename,listtosave=Most@DownValues[volumeintegrate1core],listtoload, listsame},

create=Create /. Flatten[{opts}] /. Options[SaveVolumeIntegrate1];
reset=Reset/. Flatten[{opts}] /. Options[SaveVolumeIntegrate1];
If[(nbdir=NotebookDirectory[])==="",nbdir=Directory[]];

If[Xor[(filename=FileNames[file,{"",$PNComBinDirectory,$UserBaseDirectory,$BaseDirectory,$InstallationDirectory,nbdir,$HomeDirectory,$InitialDirectory}])==={},reset],
If[reset,DeleteFile[filename=First@filename],filename=file];
If[create ||reset,Put[{},filename];create=False;reset=False,Return[$Failed]],filename=First@filename];
If[reset===True,Print["The file does not exist."];Return[$Failed],If[create===True,Print["The file already exists."];Return[$Failed],Null,Return[$Failed]],Return[$Failed]];
If[Not@MatchQ[listtoload=Get[filename],List[___]],Return[$Failed]];
listsame=Intersection[(#&)@@@listtoload, (#&)@@@listtosave];
If[MatchQ[Map[First@Cases[listtosave,(Verbatim[#]:>Module[{var___},arg_])->arg ,Infinity]-First@Cases[listtoload,(Verbatim[#]:>Module[{var___},arg_])->arg ,Infinity]&,listsame],List[0...]],Put[Sort[Union[listtosave~Join~listtoload],ByteCount[#1]<ByteCount[#2]&],filename], Print["Inconsistencies in the values of volumeintegrate1core."];Return[$Failed]]

];


Options[LoadVolumeIntegrate1]={AddDefinition->True};

LoadVolumeIntegrate1[Optional[file_String,ToFileName[$PNComBinDirectory,"SavedVolumeIntegral1.out"]],opts___?OptionQ]:=Module[{adddef,nbdir,filename,listtoload},

{adddef}={AddDefinition}/. Flatten[{opts}] /. Options[LoadVolumeIntegrate1];
If[(nbdir=NotebookDirectory[])==="",nbdir=Directory[]];If[(filename=FileNames[file,{"",$PNComBinDirectory,$UserBaseDirectory,$BaseDirectory,$InstallationDirectory,nbdir,$HomeDirectory,$InitialDirectory}])==={}, Print["The file does not exist."];Return[$Failed],filename=First@filename,Return[$Failed]];
listtoload=(Get[filename]  /. HoldPattern[PNComBin`Private`volumeintegrate1core[expr_,mem_]]:> Hold[PNComBin`Private`volumeintegrate1core][expr,mem])/. HoldPattern->Hold /. Hold[Hold[expr_][arg__]]:>Hold[expr][arg]/. HoldPattern[Hold[PNComBin`Private`volumeintegrate1core][arg__]]:>HoldPattern[PNComBin`Private`volumeintegrate1core[arg]];
If[adddef,DownValues[volumeintegrate1core]=Append[listtoload,Last@DownValues[volumeintegrate1core]];,listtoload]];


(* hadamard[expr, pole]: main function called by Hadamard1 and Hadamard2 *)

hadamard[expr_Plus,pole_]:=Module[{res},

res=0;
Do[res+=hadamard[expr[[ic]],pole],{ic,Length[expr]}];
res]; (* action on sum ressorting to a Do loop *)

(* main definition for hadamard *)

hadamard[expr_,pole:(0|1|2)]:=Module[

{varr,rulerntorn,varn,point=0},

Switch[pole,
0, varr=r[];rulerntorn=ruler1n1r2n2torn;varn=ni;point=Infinity,
1,varr=r1[];rulerntorn=ruler2n2tor1n1;varn=n1i,
2,varr=r2[];rulerntorn=ruler1n1tor2n2;varn=n2i];

Coefficient[ToCanonical@PowerExpand@Angularn[Normal@Series[expr/.rulerntorn/.Scalar[arg_]:>Scalar@Expand[arg],{varr,point,0}],varn],varr,0]
];  (* it is important to expand the argument of all scalars of the form Scalar[arg] so that Series does not regard them as dependent on varr nor try to use the Taylor formula with the function Scalar *)


Hadamard[expr_]:=hadamard[Expand@expr,0];
Hadamard1[expr_]:=hadamard[Expand@expr,1];
Hadamard2[expr_]:=hadamard[Expand@expr,2];


(* tocenterofmass[expr,order,spinflag]: main function called by ToCenterOfMass performing the relevant substitutions and truncating at the required order for individual terms *)

tocenterofmass[0,order_,spinflag_]:=0;

tocenterofmass[expr_,order_,spinflag_]:=Module[{precision=order+Exponent[expr,c]-2Exponent[expr,x[]]},SameDummies[#/.Scalar[arg_]:>Scalar@samedummies[arg]]&@PutScalarProduct[#,canonicalize->True]&@ContractMetric@ToCanonical[Truncate[Truncate[expr ,order]/.rule12toCOM/.If[Not@spinflag,ruleCOM,ruleCOMspin][precision],order]]];

(* spin turned off by default *)
Options[ToCenterOfMass]={SpinOn->False};

(* application of tocenterofmass of each term composing the expression in turn *)
ToCenterOfMass[expr_,order_,opts___]:=toloop[tocenterofmass[#,order,SpinOn/. Flatten[{opts}]/. Options[ToCenterOfMass]]&,expr]; 


(* tocirc[expr,order,spinflag]: main function called by ToCircularOrbit performing the relevant substitutions and truncating at the required order for individual terms *)
tocirc[0,order_,spinflag_]:=0;

tocirc[expr_,order_,spinflag_]:=Module[{precision=order+Exponent[expr,c]-2Exponent[expr,x[]],rule\[Gamma],expfn},

If[Not@spinflag,

rule\[Gamma]=rule\[Gamma]toxcirc[order];expfn=Expand,

rule\[Gamma]=rule\[Gamma]toxcircspin[order];expfn=Expand[#/. {Si[a_]->Sn[] nCMi[a]+S\[Lambda][] \[Lambda]CMi[a]+Sl[] lCMi[a],Sigmai[a_]->Sigman[] nCMi[a]+Sigma\[Lambda][] \[Lambda]CMi[a]+Sigmal[] lCMi[a]}/. Scalar[arg_]:>Scalar@Expand[arg] (* projection of the spin vector components in the basis nCM, \[Lambda]CM, lCM *)]&,

Print["Unknown option in TimeDerivative."]

];

SameDummies[#/.Scalar[arg_]:>Scalar@samedummies[arg]]&@PutScalarProduct[#,canonicalize->True]&[ContractMetric[

expfn@Truncate[expr/. {Scalar[nCMi[a_]vCMi[-a_]]->-64/5 c \[Nu] x[]^3,Scalar[nCMi[-a_]vCMi[a_]]->-64/5 c \[Nu] x[]^3,Scalar[vCMi[a_]vCMi[-a_]]->x[]^3 c^2/\[Gamma]^2}/.vCMi[a_]->x[]^(3/2) c/\[Gamma] \[Lambda]CMi[a]-64/5 c \[Nu] x[]^3 nCMi[a]/. rCM[]->G mtot/\[Gamma]/c^2 /. rule\[Gamma],order]

]/.rulemixedproductCOM]

];

(* spin turned off by default *)
Options[ToCircularOrbits]={SpinOn->False};

(* application of tocirc of each term composing the expression in turn *)
ToCircularOrbits[expr_,order_,opts___]:=toloop[tocirc[#,order,SpinOn/. Flatten[{opts}]/. Options[ToCircularOrbits]]&,expr];


Protect[E3,a,b,i,j,k,l,m,p,q,TangentE3,t,Metricdelta,epsilonMetricdelta,G,c,m1,m2,mtot,\[Delta],\[Nu],r0p,r0,r1p,r2p,s1,s2,\[Lambda],\[Kappa],\[Zeta],\[Xi],\[Kappa]1,\[Kappa]2,xi,r1i,r2i,y12i,v12i,a1i,a2i,S1di,S2di,Sn,S\[Lambda],Sl,Sigman,Sigma\[Lambda],Sigmal,yCMi,aCMi,x,SdCMi,SigmadCMi,STFn1L,STFn2L,STFn12L,STFnL]; (* r, r1, r2, r12, ni, n1i, n2i, n12i, y1i, y2i, v1i, v2i, p1i, p2i, S1i, S2i, rCM, nCMi, lCMi, \[Lambda]CMi, vCMi, Si, Sigmai not protected *)


Protect[PutDefinition,Truncate,LogExpand ,LogFactor,PutScalarProduct,Arrange,Unsymmetrize,CrushSTF,TimeDerivative,Derivativex,Derivativey1,Derivativey2,FromMathTensorToxTensor,Exchange12,FromUnitVectorScalarToDistances,ProductToSTF,STFToProduct,Angularn,AngularAverage1,VolumeIntegrate1,SaveVolumeIntegrate1,LoadVolumeIntegrate1,Hadamard1,Hadamard2,ToCenterOfMass,ToCircularOrbits]; (* SymmetrizeMetricProduct not protected *)


End[];
EndPackage[];
